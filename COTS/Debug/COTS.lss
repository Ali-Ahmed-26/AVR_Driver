
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00002502  00002596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  00800062  00800062  00002598  2**0
                  ALLOC
  3 .stab         000025ec  00000000  00000000  00002598  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001842  00000000  00000000  00004b84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__vector_1>
       8:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__vector_2>
       c:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__vector_3>
      10:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__vector_4>
      14:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_5>
      18:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__vector_6>
      1c:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__vector_7>
      20:	0c 94 46 09 	jmp	0x128c	; 0x128c <__vector_8>
      24:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_9>
      28:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_10>
      2c:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0c 12 	call	0x2418	; 0x2418 <main>
      8a:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_VidInit>:
#include "UART_private.h"
#include "UART_interface.h"


void UART_VidInit(BAUD_RATE Copy_BaudRate , TRANSMITTED_SPEED Copy_TRANSMITTED_SPEED)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8a 83       	std	Y+2, r24	; 0x02
      a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8UCSRCValue =0;
      aa:	19 82       	std	Y+1, r1	; 0x01
	/*set to write to UCSRC register*/
	SET_BIT(Local_u8UCSRCValue , UCSRC_URSEL);
      ac:	89 81       	ldd	r24, Y+1	; 0x01
      ae:	80 68       	ori	r24, 0x80	; 128
      b0:	89 83       	std	Y+1, r24	; 0x01

#if USART_MODE == ASYNCHRONOUS_OPERATION
	CLR_BIT(Local_u8UCSRCValue , UCSRC_UMSEL);
      b2:	89 81       	ldd	r24, Y+1	; 0x01
      b4:	8f 7b       	andi	r24, 0xBF	; 191
      b6:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Wrong USART_MODE Configuration option"
#endif

#if PARITY_MODE == DISABLED_PARITY
	CLR_BIT(Local_u8UCSRCValue , UCSRC_UPM0);
      b8:	89 81       	ldd	r24, Y+1	; 0x01
      ba:	8f 7e       	andi	r24, 0xEF	; 239
      bc:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCValue , UCSRC_UPM1);
      be:	89 81       	ldd	r24, Y+1	; 0x01
      c0:	8f 7d       	andi	r24, 0xDF	; 223
      c2:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Wrong PARITY_MODE Configuration option"
#endif

#if STOP_BIT_MODE == STOP_1BIT
	CLR_BIT(Local_u8UCSRCValue , UCSRC_USBS);
      c4:	89 81       	ldd	r24, Y+1	; 0x01
      c6:	87 7f       	andi	r24, 0xF7	; 247
      c8:	89 83       	std	Y+1, r24	; 0x01
#elif CHARACTER_SIZE == CHARACTER_7_BIT
	CLR_BIT(Local_u8UCSRCValue , UCSRC_UCSZ0);
	SET_BIT(Local_u8UCSRCValue , UCSRC_UCSZ1);
	CLR_BIT(UCSRB , UCSRB_UCSZ2);
#elif CHARACTER_SIZE == CHARACTER_8_BIT
	SET_BIT(Local_u8UCSRCValue , UCSRC_UCSZ0);
      ca:	89 81       	ldd	r24, Y+1	; 0x01
      cc:	82 60       	ori	r24, 0x02	; 2
      ce:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue , UCSRC_UCSZ1);
      d0:	89 81       	ldd	r24, Y+1	; 0x01
      d2:	84 60       	ori	r24, 0x04	; 4
      d4:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB , UCSRB_UCSZ2);
      d6:	aa e2       	ldi	r26, 0x2A	; 42
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	ea e2       	ldi	r30, 0x2A	; 42
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	8b 7f       	andi	r24, 0xFB	; 251
      e2:	8c 93       	st	X, r24
#else
#error "Wrong CHARACTER_SIZE Configuration option"
#endif

#if SYNCHRONOUS_clock == TRANSMITTED_RISING_EDGE_RECEIVED_FALLING_EDGE
	    CLR_BIT(Local_u8UCSRCValue , UCSRC_UCPOL);
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	8e 7f       	andi	r24, 0xFE	; 254
      e8:	89 83       	std	Y+1, r24	; 0x01
	    SET_BIT(Local_u8UCSRCValue , UCSRC_UCPOL);
#else
#error "Wrong SYNCHRONOUS_clock Configuration option"
#endif

	    UCSRC = Local_u8UCSRCValue;
      ea:	e0 e4       	ldi	r30, 0x40	; 64
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	89 81       	ldd	r24, Y+1	; 0x01
      f0:	80 83       	st	Z, r24


#if CLOCK_FREQUANCY == FREQUANCY_8_MHZ
	   if(Copy_TRANSMITTED_SPEED == U1X)
      f2:	8b 81       	ldd	r24, Y+3	; 0x03
      f4:	88 23       	and	r24, r24
      f6:	09 f0       	breq	.+2      	; 0xfa <UART_VidInit+0x68>
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <UART_VidInit+0x1ac>
	   {
		   CLR_BIT(UCSRA , UCSRA_U2X);
      fa:	ab e2       	ldi	r26, 0x2B	; 43
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	eb e2       	ldi	r30, 0x2B	; 43
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	8d 7f       	andi	r24, 0xFD	; 253
     106:	8c 93       	st	X, r24

	    switch(Copy_BaudRate)
     108:	8a 81       	ldd	r24, Y+2	; 0x02
     10a:	28 2f       	mov	r18, r24
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	3f 83       	std	Y+7, r19	; 0x07
     110:	2e 83       	std	Y+6, r18	; 0x06
     112:	8e 81       	ldd	r24, Y+6	; 0x06
     114:	9f 81       	ldd	r25, Y+7	; 0x07
     116:	86 30       	cpi	r24, 0x06	; 6
     118:	91 05       	cpc	r25, r1
     11a:	09 f4       	brne	.+2      	; 0x11e <UART_VidInit+0x8c>
     11c:	6e c0       	rjmp	.+220    	; 0x1fa <UART_VidInit+0x168>
     11e:	2e 81       	ldd	r18, Y+6	; 0x06
     120:	3f 81       	ldd	r19, Y+7	; 0x07
     122:	27 30       	cpi	r18, 0x07	; 7
     124:	31 05       	cpc	r19, r1
     126:	24 f5       	brge	.+72     	; 0x170 <UART_VidInit+0xde>
     128:	8e 81       	ldd	r24, Y+6	; 0x06
     12a:	9f 81       	ldd	r25, Y+7	; 0x07
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	91 05       	cpc	r25, r1
     130:	09 f4       	brne	.+2      	; 0x134 <UART_VidInit+0xa2>
     132:	4f c0       	rjmp	.+158    	; 0x1d2 <UART_VidInit+0x140>
     134:	2e 81       	ldd	r18, Y+6	; 0x06
     136:	3f 81       	ldd	r19, Y+7	; 0x07
     138:	23 30       	cpi	r18, 0x03	; 3
     13a:	31 05       	cpc	r19, r1
     13c:	64 f4       	brge	.+24     	; 0x156 <UART_VidInit+0xc4>
     13e:	8e 81       	ldd	r24, Y+6	; 0x06
     140:	9f 81       	ldd	r25, Y+7	; 0x07
     142:	00 97       	sbiw	r24, 0x00	; 0
     144:	09 f4       	brne	.+2      	; 0x148 <UART_VidInit+0xb6>
     146:	3b c0       	rjmp	.+118    	; 0x1be <UART_VidInit+0x12c>
     148:	2e 81       	ldd	r18, Y+6	; 0x06
     14a:	3f 81       	ldd	r19, Y+7	; 0x07
     14c:	21 30       	cpi	r18, 0x01	; 1
     14e:	31 05       	cpc	r19, r1
     150:	09 f4       	brne	.+2      	; 0x154 <UART_VidInit+0xc2>
     152:	3a c0       	rjmp	.+116    	; 0x1c8 <UART_VidInit+0x136>
     154:	22 c1       	rjmp	.+580    	; 0x39a <UART_VidInit+0x308>
     156:	8e 81       	ldd	r24, Y+6	; 0x06
     158:	9f 81       	ldd	r25, Y+7	; 0x07
     15a:	84 30       	cpi	r24, 0x04	; 4
     15c:	91 05       	cpc	r25, r1
     15e:	09 f4       	brne	.+2      	; 0x162 <UART_VidInit+0xd0>
     160:	42 c0       	rjmp	.+132    	; 0x1e6 <UART_VidInit+0x154>
     162:	2e 81       	ldd	r18, Y+6	; 0x06
     164:	3f 81       	ldd	r19, Y+7	; 0x07
     166:	25 30       	cpi	r18, 0x05	; 5
     168:	31 05       	cpc	r19, r1
     16a:	0c f0       	brlt	.+2      	; 0x16e <UART_VidInit+0xdc>
     16c:	41 c0       	rjmp	.+130    	; 0x1f0 <UART_VidInit+0x15e>
     16e:	36 c0       	rjmp	.+108    	; 0x1dc <UART_VidInit+0x14a>
     170:	8e 81       	ldd	r24, Y+6	; 0x06
     172:	9f 81       	ldd	r25, Y+7	; 0x07
     174:	89 30       	cpi	r24, 0x09	; 9
     176:	91 05       	cpc	r25, r1
     178:	09 f4       	brne	.+2      	; 0x17c <UART_VidInit+0xea>
     17a:	4e c0       	rjmp	.+156    	; 0x218 <UART_VidInit+0x186>
     17c:	2e 81       	ldd	r18, Y+6	; 0x06
     17e:	3f 81       	ldd	r19, Y+7	; 0x07
     180:	2a 30       	cpi	r18, 0x0A	; 10
     182:	31 05       	cpc	r19, r1
     184:	5c f4       	brge	.+22     	; 0x19c <UART_VidInit+0x10a>
     186:	8e 81       	ldd	r24, Y+6	; 0x06
     188:	9f 81       	ldd	r25, Y+7	; 0x07
     18a:	87 30       	cpi	r24, 0x07	; 7
     18c:	91 05       	cpc	r25, r1
     18e:	d1 f1       	breq	.+116    	; 0x204 <UART_VidInit+0x172>
     190:	2e 81       	ldd	r18, Y+6	; 0x06
     192:	3f 81       	ldd	r19, Y+7	; 0x07
     194:	28 30       	cpi	r18, 0x08	; 8
     196:	31 05       	cpc	r19, r1
     198:	d1 f1       	breq	.+116    	; 0x20e <UART_VidInit+0x17c>
     19a:	ff c0       	rjmp	.+510    	; 0x39a <UART_VidInit+0x308>
     19c:	8e 81       	ldd	r24, Y+6	; 0x06
     19e:	9f 81       	ldd	r25, Y+7	; 0x07
     1a0:	8b 30       	cpi	r24, 0x0B	; 11
     1a2:	91 05       	cpc	r25, r1
     1a4:	09 f4       	brne	.+2      	; 0x1a8 <UART_VidInit+0x116>
     1a6:	42 c0       	rjmp	.+132    	; 0x22c <UART_VidInit+0x19a>
     1a8:	2e 81       	ldd	r18, Y+6	; 0x06
     1aa:	3f 81       	ldd	r19, Y+7	; 0x07
     1ac:	2b 30       	cpi	r18, 0x0B	; 11
     1ae:	31 05       	cpc	r19, r1
     1b0:	c4 f1       	brlt	.+112    	; 0x222 <UART_VidInit+0x190>
     1b2:	8e 81       	ldd	r24, Y+6	; 0x06
     1b4:	9f 81       	ldd	r25, Y+7	; 0x07
     1b6:	8c 30       	cpi	r24, 0x0C	; 12
     1b8:	91 05       	cpc	r25, r1
     1ba:	e9 f1       	breq	.+122    	; 0x236 <UART_VidInit+0x1a4>
     1bc:	ee c0       	rjmp	.+476    	; 0x39a <UART_VidInit+0x308>
	    {
	    case (BAUD_RATE_2400) : UBRRL = 207; break;
     1be:	e9 e2       	ldi	r30, 0x29	; 41
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	8f ec       	ldi	r24, 0xCF	; 207
     1c4:	80 83       	st	Z, r24
     1c6:	e9 c0       	rjmp	.+466    	; 0x39a <UART_VidInit+0x308>
	    case (BAUD_RATE_4800) : UBRRL = 103; break;
     1c8:	e9 e2       	ldi	r30, 0x29	; 41
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	87 e6       	ldi	r24, 0x67	; 103
     1ce:	80 83       	st	Z, r24
     1d0:	e4 c0       	rjmp	.+456    	; 0x39a <UART_VidInit+0x308>
	    case (BAUD_RATE_9600) : UBRRL = 51; break;
     1d2:	e9 e2       	ldi	r30, 0x29	; 41
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	83 e3       	ldi	r24, 0x33	; 51
     1d8:	80 83       	st	Z, r24
     1da:	df c0       	rjmp	.+446    	; 0x39a <UART_VidInit+0x308>
	    case (BAUD_RATE_14_4K): UBRRL = 34; break;
     1dc:	e9 e2       	ldi	r30, 0x29	; 41
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	82 e2       	ldi	r24, 0x22	; 34
     1e2:	80 83       	st	Z, r24
     1e4:	da c0       	rjmp	.+436    	; 0x39a <UART_VidInit+0x308>
	    case (BAUD_RATE_19_2K): UBRRL = 25; break;
     1e6:	e9 e2       	ldi	r30, 0x29	; 41
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	89 e1       	ldi	r24, 0x19	; 25
     1ec:	80 83       	st	Z, r24
     1ee:	d5 c0       	rjmp	.+426    	; 0x39a <UART_VidInit+0x308>
	    case (BAUD_RATE_28_8K): UBRRL = 16; break;
     1f0:	e9 e2       	ldi	r30, 0x29	; 41
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	80 83       	st	Z, r24
     1f8:	d0 c0       	rjmp	.+416    	; 0x39a <UART_VidInit+0x308>
	    case (BAUD_RATE_38_4K): UBRRL = 12; break;
     1fa:	e9 e2       	ldi	r30, 0x29	; 41
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	8c e0       	ldi	r24, 0x0C	; 12
     200:	80 83       	st	Z, r24
     202:	cb c0       	rjmp	.+406    	; 0x39a <UART_VidInit+0x308>
	    case (BAUD_RATE_57_6K): UBRRL = 8; break;
     204:	e9 e2       	ldi	r30, 0x29	; 41
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	88 e0       	ldi	r24, 0x08	; 8
     20a:	80 83       	st	Z, r24
     20c:	c6 c0       	rjmp	.+396    	; 0x39a <UART_VidInit+0x308>
	    case (BAUD_RATE_76_8K): UBRRL = 6; break;
     20e:	e9 e2       	ldi	r30, 0x29	; 41
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	86 e0       	ldi	r24, 0x06	; 6
     214:	80 83       	st	Z, r24
     216:	c1 c0       	rjmp	.+386    	; 0x39a <UART_VidInit+0x308>
	    case (BAUD_RATE_115_2K): UBRRL = 3;break;
     218:	e9 e2       	ldi	r30, 0x29	; 41
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	83 e0       	ldi	r24, 0x03	; 3
     21e:	80 83       	st	Z, r24
     220:	bc c0       	rjmp	.+376    	; 0x39a <UART_VidInit+0x308>
	    case (BAUD_RATE_230_4K): UBRRL = 1;break;
     222:	e9 e2       	ldi	r30, 0x29	; 41
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	80 83       	st	Z, r24
     22a:	b7 c0       	rjmp	.+366    	; 0x39a <UART_VidInit+0x308>
	    case (BAUD_RATE_250K)  : UBRRL = 1;break;
     22c:	e9 e2       	ldi	r30, 0x29	; 41
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	80 83       	st	Z, r24
     234:	b2 c0       	rjmp	.+356    	; 0x39a <UART_VidInit+0x308>
	    case (BAUD_RATE_0_5M)  : UBRRL = 0;break;
     236:	e9 e2       	ldi	r30, 0x29	; 41
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	10 82       	st	Z, r1
     23c:	ae c0       	rjmp	.+348    	; 0x39a <UART_VidInit+0x308>
	    }
	   }
	   else if(Copy_TRANSMITTED_SPEED == U2X)
     23e:	8b 81       	ldd	r24, Y+3	; 0x03
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	09 f0       	breq	.+2      	; 0x246 <UART_VidInit+0x1b4>
     244:	aa c0       	rjmp	.+340    	; 0x39a <UART_VidInit+0x308>
	   {
		   SET_BIT(UCSRA , UCSRA_U2X);
     246:	ab e2       	ldi	r26, 0x2B	; 43
     248:	b0 e0       	ldi	r27, 0x00	; 0
     24a:	eb e2       	ldi	r30, 0x2B	; 43
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	82 60       	ori	r24, 0x02	; 2
     252:	8c 93       	st	X, r24

		   switch(Copy_BaudRate)
     254:	8a 81       	ldd	r24, Y+2	; 0x02
     256:	28 2f       	mov	r18, r24
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	3d 83       	std	Y+5, r19	; 0x05
     25c:	2c 83       	std	Y+4, r18	; 0x04
     25e:	8c 81       	ldd	r24, Y+4	; 0x04
     260:	9d 81       	ldd	r25, Y+5	; 0x05
     262:	86 30       	cpi	r24, 0x06	; 6
     264:	91 05       	cpc	r25, r1
     266:	09 f4       	brne	.+2      	; 0x26a <UART_VidInit+0x1d8>
     268:	72 c0       	rjmp	.+228    	; 0x34e <UART_VidInit+0x2bc>
     26a:	2c 81       	ldd	r18, Y+4	; 0x04
     26c:	3d 81       	ldd	r19, Y+5	; 0x05
     26e:	27 30       	cpi	r18, 0x07	; 7
     270:	31 05       	cpc	r19, r1
     272:	24 f5       	brge	.+72     	; 0x2bc <UART_VidInit+0x22a>
     274:	8c 81       	ldd	r24, Y+4	; 0x04
     276:	9d 81       	ldd	r25, Y+5	; 0x05
     278:	82 30       	cpi	r24, 0x02	; 2
     27a:	91 05       	cpc	r25, r1
     27c:	09 f4       	brne	.+2      	; 0x280 <UART_VidInit+0x1ee>
     27e:	53 c0       	rjmp	.+166    	; 0x326 <UART_VidInit+0x294>
     280:	2c 81       	ldd	r18, Y+4	; 0x04
     282:	3d 81       	ldd	r19, Y+5	; 0x05
     284:	23 30       	cpi	r18, 0x03	; 3
     286:	31 05       	cpc	r19, r1
     288:	64 f4       	brge	.+24     	; 0x2a2 <UART_VidInit+0x210>
     28a:	8c 81       	ldd	r24, Y+4	; 0x04
     28c:	9d 81       	ldd	r25, Y+5	; 0x05
     28e:	00 97       	sbiw	r24, 0x00	; 0
     290:	09 f4       	brne	.+2      	; 0x294 <UART_VidInit+0x202>
     292:	3f c0       	rjmp	.+126    	; 0x312 <UART_VidInit+0x280>
     294:	2c 81       	ldd	r18, Y+4	; 0x04
     296:	3d 81       	ldd	r19, Y+5	; 0x05
     298:	21 30       	cpi	r18, 0x01	; 1
     29a:	31 05       	cpc	r19, r1
     29c:	09 f4       	brne	.+2      	; 0x2a0 <UART_VidInit+0x20e>
     29e:	3e c0       	rjmp	.+124    	; 0x31c <UART_VidInit+0x28a>
     2a0:	7c c0       	rjmp	.+248    	; 0x39a <UART_VidInit+0x308>
     2a2:	8c 81       	ldd	r24, Y+4	; 0x04
     2a4:	9d 81       	ldd	r25, Y+5	; 0x05
     2a6:	84 30       	cpi	r24, 0x04	; 4
     2a8:	91 05       	cpc	r25, r1
     2aa:	09 f4       	brne	.+2      	; 0x2ae <UART_VidInit+0x21c>
     2ac:	46 c0       	rjmp	.+140    	; 0x33a <UART_VidInit+0x2a8>
     2ae:	2c 81       	ldd	r18, Y+4	; 0x04
     2b0:	3d 81       	ldd	r19, Y+5	; 0x05
     2b2:	25 30       	cpi	r18, 0x05	; 5
     2b4:	31 05       	cpc	r19, r1
     2b6:	0c f0       	brlt	.+2      	; 0x2ba <UART_VidInit+0x228>
     2b8:	45 c0       	rjmp	.+138    	; 0x344 <UART_VidInit+0x2b2>
     2ba:	3a c0       	rjmp	.+116    	; 0x330 <UART_VidInit+0x29e>
     2bc:	8c 81       	ldd	r24, Y+4	; 0x04
     2be:	9d 81       	ldd	r25, Y+5	; 0x05
     2c0:	8a 30       	cpi	r24, 0x0A	; 10
     2c2:	91 05       	cpc	r25, r1
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <UART_VidInit+0x236>
     2c6:	57 c0       	rjmp	.+174    	; 0x376 <UART_VidInit+0x2e4>
     2c8:	2c 81       	ldd	r18, Y+4	; 0x04
     2ca:	3d 81       	ldd	r19, Y+5	; 0x05
     2cc:	2b 30       	cpi	r18, 0x0B	; 11
     2ce:	31 05       	cpc	r19, r1
     2d0:	6c f4       	brge	.+26     	; 0x2ec <UART_VidInit+0x25a>
     2d2:	8c 81       	ldd	r24, Y+4	; 0x04
     2d4:	9d 81       	ldd	r25, Y+5	; 0x05
     2d6:	88 30       	cpi	r24, 0x08	; 8
     2d8:	91 05       	cpc	r25, r1
     2da:	09 f4       	brne	.+2      	; 0x2de <UART_VidInit+0x24c>
     2dc:	42 c0       	rjmp	.+132    	; 0x362 <UART_VidInit+0x2d0>
     2de:	2c 81       	ldd	r18, Y+4	; 0x04
     2e0:	3d 81       	ldd	r19, Y+5	; 0x05
     2e2:	29 30       	cpi	r18, 0x09	; 9
     2e4:	31 05       	cpc	r19, r1
     2e6:	0c f0       	brlt	.+2      	; 0x2ea <UART_VidInit+0x258>
     2e8:	41 c0       	rjmp	.+130    	; 0x36c <UART_VidInit+0x2da>
     2ea:	36 c0       	rjmp	.+108    	; 0x358 <UART_VidInit+0x2c6>
     2ec:	8c 81       	ldd	r24, Y+4	; 0x04
     2ee:	9d 81       	ldd	r25, Y+5	; 0x05
     2f0:	8c 30       	cpi	r24, 0x0C	; 12
     2f2:	91 05       	cpc	r25, r1
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <UART_VidInit+0x266>
     2f6:	49 c0       	rjmp	.+146    	; 0x38a <UART_VidInit+0x2f8>
     2f8:	2c 81       	ldd	r18, Y+4	; 0x04
     2fa:	3d 81       	ldd	r19, Y+5	; 0x05
     2fc:	2c 30       	cpi	r18, 0x0C	; 12
     2fe:	31 05       	cpc	r19, r1
     300:	0c f4       	brge	.+2      	; 0x304 <UART_VidInit+0x272>
     302:	3e c0       	rjmp	.+124    	; 0x380 <UART_VidInit+0x2ee>
     304:	8c 81       	ldd	r24, Y+4	; 0x04
     306:	9d 81       	ldd	r25, Y+5	; 0x05
     308:	8d 30       	cpi	r24, 0x0D	; 13
     30a:	91 05       	cpc	r25, r1
     30c:	09 f4       	brne	.+2      	; 0x310 <UART_VidInit+0x27e>
     30e:	42 c0       	rjmp	.+132    	; 0x394 <UART_VidInit+0x302>
     310:	44 c0       	rjmp	.+136    	; 0x39a <UART_VidInit+0x308>
		   	    {
		   	    case (BAUD_RATE_2400) : UBRRL = 416; break;
     312:	e9 e2       	ldi	r30, 0x29	; 41
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	80 ea       	ldi	r24, 0xA0	; 160
     318:	80 83       	st	Z, r24
     31a:	3f c0       	rjmp	.+126    	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_4800) : UBRRL = 207; break;
     31c:	e9 e2       	ldi	r30, 0x29	; 41
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	8f ec       	ldi	r24, 0xCF	; 207
     322:	80 83       	st	Z, r24
     324:	3a c0       	rjmp	.+116    	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_9600) : UBRRL = 103; break;
     326:	e9 e2       	ldi	r30, 0x29	; 41
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	87 e6       	ldi	r24, 0x67	; 103
     32c:	80 83       	st	Z, r24
     32e:	35 c0       	rjmp	.+106    	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_14_4K): UBRRL = 68; break;
     330:	e9 e2       	ldi	r30, 0x29	; 41
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	84 e4       	ldi	r24, 0x44	; 68
     336:	80 83       	st	Z, r24
     338:	30 c0       	rjmp	.+96     	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_19_2K): UBRRL = 51; break;
     33a:	e9 e2       	ldi	r30, 0x29	; 41
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	83 e3       	ldi	r24, 0x33	; 51
     340:	80 83       	st	Z, r24
     342:	2b c0       	rjmp	.+86     	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_28_8K): UBRRL = 34; break;
     344:	e9 e2       	ldi	r30, 0x29	; 41
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	82 e2       	ldi	r24, 0x22	; 34
     34a:	80 83       	st	Z, r24
     34c:	26 c0       	rjmp	.+76     	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_38_4K): UBRRL = 25; break;
     34e:	e9 e2       	ldi	r30, 0x29	; 41
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	89 e1       	ldi	r24, 0x19	; 25
     354:	80 83       	st	Z, r24
     356:	21 c0       	rjmp	.+66     	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_57_6K): UBRRL = 16; break;
     358:	e9 e2       	ldi	r30, 0x29	; 41
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 e1       	ldi	r24, 0x10	; 16
     35e:	80 83       	st	Z, r24
     360:	1c c0       	rjmp	.+56     	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_76_8K): UBRRL = 12; break;
     362:	e9 e2       	ldi	r30, 0x29	; 41
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	8c e0       	ldi	r24, 0x0C	; 12
     368:	80 83       	st	Z, r24
     36a:	17 c0       	rjmp	.+46     	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_115_2K): UBRRL = 8;break;
     36c:	e9 e2       	ldi	r30, 0x29	; 41
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	88 e0       	ldi	r24, 0x08	; 8
     372:	80 83       	st	Z, r24
     374:	12 c0       	rjmp	.+36     	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_230_4K): UBRRL = 3;break;
     376:	e9 e2       	ldi	r30, 0x29	; 41
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	83 e0       	ldi	r24, 0x03	; 3
     37c:	80 83       	st	Z, r24
     37e:	0d c0       	rjmp	.+26     	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_250K)  : UBRRL = 3;break;
     380:	e9 e2       	ldi	r30, 0x29	; 41
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	83 e0       	ldi	r24, 0x03	; 3
     386:	80 83       	st	Z, r24
     388:	08 c0       	rjmp	.+16     	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_0_5M)  : UBRRL = 1;break;
     38a:	e9 e2       	ldi	r30, 0x29	; 41
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	80 83       	st	Z, r24
     392:	03 c0       	rjmp	.+6      	; 0x39a <UART_VidInit+0x308>
		   	    case (BAUD_RATE_1M)    : UBRRL = 0;break;
     394:	e9 e2       	ldi	r30, 0x29	; 41
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	10 82       	st	Z, r1
#else
#error "Wrong CLOCK_FREQUANCY Configuration option"
#endif

#if TRANSMITTER_MODE == ENABLED
	   SET_BIT(UCSRB , UCSRB_TXEN);
     39a:	aa e2       	ldi	r26, 0x2A	; 42
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	ea e2       	ldi	r30, 0x2A	; 42
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 81       	ld	r24, Z
     3a4:	88 60       	ori	r24, 0x08	; 8
     3a6:	8c 93       	st	X, r24
#else
#error "Wrong TRANSMITTER_MODE Configuration option"
#endif

#if RECEIVER_MODE == ENABLED
	   SET_BIT(UCSRB , UCSRB_RXEN);
     3a8:	aa e2       	ldi	r26, 0x2A	; 42
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	ea e2       	ldi	r30, 0x2A	; 42
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	80 61       	ori	r24, 0x10	; 16
     3b4:	8c 93       	st	X, r24
#elif RECEIVER_MODE == DISABLED
	   CLR_BIT(UCSRB , UCSRB_RXEN);
#else
#error "Wrong RECEIVER_MODE Configuration option"
#endif
}
     3b6:	27 96       	adiw	r28, 0x07	; 7
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	cf 91       	pop	r28
     3c4:	df 91       	pop	r29
     3c6:	08 95       	ret

000003c8 <UART_VidSend>:

void UART_VidSend(u8 Copy_u8Data)
{
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	0f 92       	push	r0
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
     3d2:	89 83       	std	Y+1, r24	; 0x01
   while((GET_BIT(UCSRA , UCSRA_UDRE))==0 );
     3d4:	eb e2       	ldi	r30, 0x2B	; 43
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	82 95       	swap	r24
     3dc:	86 95       	lsr	r24
     3de:	87 70       	andi	r24, 0x07	; 7
     3e0:	88 2f       	mov	r24, r24
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	81 70       	andi	r24, 0x01	; 1
     3e6:	90 70       	andi	r25, 0x00	; 0
     3e8:	00 97       	sbiw	r24, 0x00	; 0
     3ea:	a1 f3       	breq	.-24     	; 0x3d4 <UART_VidSend+0xc>

   UDR = Copy_u8Data;
     3ec:	ec e2       	ldi	r30, 0x2C	; 44
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	80 83       	st	Z, r24
}
     3f4:	0f 90       	pop	r0
     3f6:	cf 91       	pop	r28
     3f8:	df 91       	pop	r29
     3fa:	08 95       	ret

000003fc <UART_VidRecevie>:

u8 UART_VidRecevie(void)
{
     3fc:	df 93       	push	r29
     3fe:	cf 93       	push	r28
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
	while((GET_BIT(UCSRA , UCSRA_RXC))==0 );
     404:	eb e2       	ldi	r30, 0x2B	; 43
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	88 23       	and	r24, r24
     40c:	dc f7       	brge	.-10     	; 0x404 <UART_VidRecevie+0x8>

	return UDR;
     40e:	ec e2       	ldi	r30, 0x2C	; 44
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	80 81       	ld	r24, Z
}
     414:	cf 91       	pop	r28
     416:	df 91       	pop	r29
     418:	08 95       	ret

0000041a <TIMER0_VidInit>:
#include "Timer0_private.h"
#include "Timer0_register.h"

/*PreBuild Configuration for Timer0 */
void TIMER0_VidInit(void)
{
     41a:	df 93       	push	r29
     41c:	cf 93       	push	r28
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
	/*Choose Timer0 mode*/
#if TIMER0_MODE == NORMAL_MODE
	CLR_BIT(TCCR0 , TCCR0_WGM00);
     422:	a3 e5       	ldi	r26, 0x53	; 83
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e3 e5       	ldi	r30, 0x53	; 83
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	8f 7b       	andi	r24, 0xBF	; 191
     42e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_WGM01);
     430:	a3 e5       	ldi	r26, 0x53	; 83
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	e3 e5       	ldi	r30, 0x53	; 83
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	87 7f       	andi	r24, 0xF7	; 247
     43c:	8c 93       	st	X, r24
#else
#error "Wrong TIMER0_MODE Configuration option"
#endif

#if TIMER0_COMPARE_OUTPUT_MODE == NORMAL_OC0_DISCONNECTED
	TCCR0 &= CTC_OUTPUT_MASK;
     43e:	a3 e5       	ldi	r26, 0x53	; 83
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e3 e5       	ldi	r30, 0x53	; 83
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	8f 7c       	andi	r24, 0xCF	; 207
     44a:	8c 93       	st	X, r24
#else
#error "Wrong TIMER0_COMPARE_OUTPUT_MODE Configuration option"
#endif

	/*Set Prescaler*/
	TCCR0 &= TCCR0_MASK;
     44c:	a3 e5       	ldi	r26, 0x53	; 83
     44e:	b0 e0       	ldi	r27, 0x00	; 0
     450:	e3 e5       	ldi	r30, 0x53	; 83
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	88 7f       	andi	r24, 0xF8	; 248
     458:	8c 93       	st	X, r24
	TCCR0 |= TIMER_PRESCALER;
     45a:	a3 e5       	ldi	r26, 0x53	; 83
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	e3 e5       	ldi	r30, 0x53	; 83
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	82 60       	ori	r24, 0x02	; 2
     466:	8c 93       	st	X, r24
}
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	08 95       	ret

0000046e <TIMER0_VidTimerInit>:

/*Post Build Configuration for Timer0 */

void TIMER0_VidTimerInit(TIMER_MODES_TYPE Copy_EnumMode , TIMER_PRESCALER_TYPE Copy_EnumPrescaler , TIMER0_CTC_MODE_TYPE Copy_CTC_Modes)
{
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	2a 97       	sbiw	r28, 0x0a	; 10
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	cd bf       	out	0x3d, r28	; 61
     482:	89 83       	std	Y+1, r24	; 0x01
     484:	6a 83       	std	Y+2, r22	; 0x02
     486:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_EnumMode)
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	28 2f       	mov	r18, r24
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	3a 87       	std	Y+10, r19	; 0x0a
     490:	29 87       	std	Y+9, r18	; 0x09
     492:	89 85       	ldd	r24, Y+9	; 0x09
     494:	9a 85       	ldd	r25, Y+10	; 0x0a
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	91 05       	cpc	r25, r1
     49a:	21 f1       	breq	.+72     	; 0x4e4 <TIMER0_VidTimerInit+0x76>
     49c:	29 85       	ldd	r18, Y+9	; 0x09
     49e:	3a 85       	ldd	r19, Y+10	; 0x0a
     4a0:	22 30       	cpi	r18, 0x02	; 2
     4a2:	31 05       	cpc	r19, r1
     4a4:	2c f4       	brge	.+10     	; 0x4b0 <TIMER0_VidTimerInit+0x42>
     4a6:	89 85       	ldd	r24, Y+9	; 0x09
     4a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4aa:	00 97       	sbiw	r24, 0x00	; 0
     4ac:	61 f0       	breq	.+24     	; 0x4c6 <TIMER0_VidTimerInit+0x58>
     4ae:	46 c0       	rjmp	.+140    	; 0x53c <TIMER0_VidTimerInit+0xce>
     4b0:	29 85       	ldd	r18, Y+9	; 0x09
     4b2:	3a 85       	ldd	r19, Y+10	; 0x0a
     4b4:	22 30       	cpi	r18, 0x02	; 2
     4b6:	31 05       	cpc	r19, r1
     4b8:	21 f1       	breq	.+72     	; 0x502 <TIMER0_VidTimerInit+0x94>
     4ba:	89 85       	ldd	r24, Y+9	; 0x09
     4bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4be:	83 30       	cpi	r24, 0x03	; 3
     4c0:	91 05       	cpc	r25, r1
     4c2:	71 f1       	breq	.+92     	; 0x520 <TIMER0_VidTimerInit+0xb2>
     4c4:	3b c0       	rjmp	.+118    	; 0x53c <TIMER0_VidTimerInit+0xce>
	{
	case (NORMAL) : CLR_BIT(TCCR0 , TCCR0_WGM00); CLR_BIT(TCCR0 , TCCR0_WGM01); break;
     4c6:	a3 e5       	ldi	r26, 0x53	; 83
     4c8:	b0 e0       	ldi	r27, 0x00	; 0
     4ca:	e3 e5       	ldi	r30, 0x53	; 83
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	8f 7b       	andi	r24, 0xBF	; 191
     4d2:	8c 93       	st	X, r24
     4d4:	a3 e5       	ldi	r26, 0x53	; 83
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	e3 e5       	ldi	r30, 0x53	; 83
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	80 81       	ld	r24, Z
     4de:	87 7f       	andi	r24, 0xF7	; 247
     4e0:	8c 93       	st	X, r24
     4e2:	2c c0       	rjmp	.+88     	; 0x53c <TIMER0_VidTimerInit+0xce>
	case (PWM_PHASE_CORRECT) : SET_BIT(TCCR0 , TCCR0_WGM00); CLR_BIT(TCCR0 , TCCR0_WGM01); break;
     4e4:	a3 e5       	ldi	r26, 0x53	; 83
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	e3 e5       	ldi	r30, 0x53	; 83
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	80 64       	ori	r24, 0x40	; 64
     4f0:	8c 93       	st	X, r24
     4f2:	a3 e5       	ldi	r26, 0x53	; 83
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	e3 e5       	ldi	r30, 0x53	; 83
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	87 7f       	andi	r24, 0xF7	; 247
     4fe:	8c 93       	st	X, r24
     500:	1d c0       	rjmp	.+58     	; 0x53c <TIMER0_VidTimerInit+0xce>
	case (CTC) : CLR_BIT(TCCR0 , TCCR0_WGM00); SET_BIT(TCCR0 , TCCR0_WGM01); break;
     502:	a3 e5       	ldi	r26, 0x53	; 83
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	e3 e5       	ldi	r30, 0x53	; 83
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	8f 7b       	andi	r24, 0xBF	; 191
     50e:	8c 93       	st	X, r24
     510:	a3 e5       	ldi	r26, 0x53	; 83
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e3 e5       	ldi	r30, 0x53	; 83
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	88 60       	ori	r24, 0x08	; 8
     51c:	8c 93       	st	X, r24
     51e:	0e c0       	rjmp	.+28     	; 0x53c <TIMER0_VidTimerInit+0xce>
	case (PWM_FAST) : SET_BIT(TCCR0 , TCCR0_WGM00); SET_BIT(TCCR0 , TCCR0_WGM01); break;
     520:	a3 e5       	ldi	r26, 0x53	; 83
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	e3 e5       	ldi	r30, 0x53	; 83
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	80 81       	ld	r24, Z
     52a:	80 64       	ori	r24, 0x40	; 64
     52c:	8c 93       	st	X, r24
     52e:	a3 e5       	ldi	r26, 0x53	; 83
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	e3 e5       	ldi	r30, 0x53	; 83
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	80 81       	ld	r24, Z
     538:	88 60       	ori	r24, 0x08	; 8
     53a:	8c 93       	st	X, r24
	}

	switch(Copy_CTC_Modes)
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	28 2f       	mov	r18, r24
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	38 87       	std	Y+8, r19	; 0x08
     544:	2f 83       	std	Y+7, r18	; 0x07
     546:	8f 81       	ldd	r24, Y+7	; 0x07
     548:	98 85       	ldd	r25, Y+8	; 0x08
     54a:	83 30       	cpi	r24, 0x03	; 3
     54c:	91 05       	cpc	r25, r1
     54e:	09 f4       	brne	.+2      	; 0x552 <TIMER0_VidTimerInit+0xe4>
     550:	53 c0       	rjmp	.+166    	; 0x5f8 <TIMER0_VidTimerInit+0x18a>
     552:	2f 81       	ldd	r18, Y+7	; 0x07
     554:	38 85       	ldd	r19, Y+8	; 0x08
     556:	24 30       	cpi	r18, 0x04	; 4
     558:	31 05       	cpc	r19, r1
     55a:	7c f4       	brge	.+30     	; 0x57a <TIMER0_VidTimerInit+0x10c>
     55c:	8f 81       	ldd	r24, Y+7	; 0x07
     55e:	98 85       	ldd	r25, Y+8	; 0x08
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	91 05       	cpc	r25, r1
     564:	59 f1       	breq	.+86     	; 0x5bc <TIMER0_VidTimerInit+0x14e>
     566:	2f 81       	ldd	r18, Y+7	; 0x07
     568:	38 85       	ldd	r19, Y+8	; 0x08
     56a:	22 30       	cpi	r18, 0x02	; 2
     56c:	31 05       	cpc	r19, r1
     56e:	ac f5       	brge	.+106    	; 0x5da <TIMER0_VidTimerInit+0x16c>
     570:	8f 81       	ldd	r24, Y+7	; 0x07
     572:	98 85       	ldd	r25, Y+8	; 0x08
     574:	00 97       	sbiw	r24, 0x00	; 0
     576:	d1 f0       	breq	.+52     	; 0x5ac <TIMER0_VidTimerInit+0x13e>
     578:	89 c0       	rjmp	.+274    	; 0x68c <TIMER0_VidTimerInit+0x21e>
     57a:	2f 81       	ldd	r18, Y+7	; 0x07
     57c:	38 85       	ldd	r19, Y+8	; 0x08
     57e:	25 30       	cpi	r18, 0x05	; 5
     580:	31 05       	cpc	r19, r1
     582:	09 f4       	brne	.+2      	; 0x586 <TIMER0_VidTimerInit+0x118>
     584:	57 c0       	rjmp	.+174    	; 0x634 <TIMER0_VidTimerInit+0x1c6>
     586:	8f 81       	ldd	r24, Y+7	; 0x07
     588:	98 85       	ldd	r25, Y+8	; 0x08
     58a:	85 30       	cpi	r24, 0x05	; 5
     58c:	91 05       	cpc	r25, r1
     58e:	0c f4       	brge	.+2      	; 0x592 <TIMER0_VidTimerInit+0x124>
     590:	42 c0       	rjmp	.+132    	; 0x616 <TIMER0_VidTimerInit+0x1a8>
     592:	2f 81       	ldd	r18, Y+7	; 0x07
     594:	38 85       	ldd	r19, Y+8	; 0x08
     596:	26 30       	cpi	r18, 0x06	; 6
     598:	31 05       	cpc	r19, r1
     59a:	09 f4       	brne	.+2      	; 0x59e <TIMER0_VidTimerInit+0x130>
     59c:	5a c0       	rjmp	.+180    	; 0x652 <TIMER0_VidTimerInit+0x1e4>
     59e:	8f 81       	ldd	r24, Y+7	; 0x07
     5a0:	98 85       	ldd	r25, Y+8	; 0x08
     5a2:	87 30       	cpi	r24, 0x07	; 7
     5a4:	91 05       	cpc	r25, r1
     5a6:	09 f4       	brne	.+2      	; 0x5aa <TIMER0_VidTimerInit+0x13c>
     5a8:	63 c0       	rjmp	.+198    	; 0x670 <TIMER0_VidTimerInit+0x202>
     5aa:	70 c0       	rjmp	.+224    	; 0x68c <TIMER0_VidTimerInit+0x21e>
	{
	case (OC0_DISCONNECTED) : TCCR0 &= CTC_OUTPUT_MASK; break;
     5ac:	a3 e5       	ldi	r26, 0x53	; 83
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	e3 e5       	ldi	r30, 0x53	; 83
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	8f 7c       	andi	r24, 0xCF	; 207
     5b8:	8c 93       	st	X, r24
     5ba:	68 c0       	rjmp	.+208    	; 0x68c <TIMER0_VidTimerInit+0x21e>
	case (CTC_NON_PWM_TOGGLE_OC0_ON_CTC) : TCCR0 &= CTC_OUTPUT_MASK; TCCR0 |= 0b11011111; break;
     5bc:	a3 e5       	ldi	r26, 0x53	; 83
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	e3 e5       	ldi	r30, 0x53	; 83
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	8f 7c       	andi	r24, 0xCF	; 207
     5c8:	8c 93       	st	X, r24
     5ca:	a3 e5       	ldi	r26, 0x53	; 83
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	e3 e5       	ldi	r30, 0x53	; 83
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	8f 6d       	ori	r24, 0xDF	; 223
     5d6:	8c 93       	st	X, r24
     5d8:	59 c0       	rjmp	.+178    	; 0x68c <TIMER0_VidTimerInit+0x21e>
	case (CTC_NON_PWM_CLEAR_OC0_ON_CTC): TCCR0 &= CTC_OUTPUT_MASK; TCCR0 |= 0b11101111; break;
     5da:	a3 e5       	ldi	r26, 0x53	; 83
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e3 e5       	ldi	r30, 0x53	; 83
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	8f 7c       	andi	r24, 0xCF	; 207
     5e6:	8c 93       	st	X, r24
     5e8:	a3 e5       	ldi	r26, 0x53	; 83
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	e3 e5       	ldi	r30, 0x53	; 83
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	8f 6e       	ori	r24, 0xEF	; 239
     5f4:	8c 93       	st	X, r24
     5f6:	4a c0       	rjmp	.+148    	; 0x68c <TIMER0_VidTimerInit+0x21e>
	case (CTC_NON_PWM_SET_OC0_ON_CTC): TCCR0 &= CTC_OUTPUT_MASK; TCCR0 |= 0b11111111; break;
     5f8:	a3 e5       	ldi	r26, 0x53	; 83
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	e3 e5       	ldi	r30, 0x53	; 83
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	8f 7c       	andi	r24, 0xCF	; 207
     604:	8c 93       	st	X, r24
     606:	e3 e5       	ldi	r30, 0x53	; 83
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	90 81       	ld	r25, Z
     60c:	e3 e5       	ldi	r30, 0x53	; 83
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	80 83       	st	Z, r24
     614:	3b c0       	rjmp	.+118    	; 0x68c <TIMER0_VidTimerInit+0x21e>
	case (CTC_FAST_PWM_CLEAR_OC0_ON_CTC_SET_ON_TOP): TCCR0 &= CTC_OUTPUT_MASK; TCCR0 |= 0b11101111; break;
     616:	a3 e5       	ldi	r26, 0x53	; 83
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e3 e5       	ldi	r30, 0x53	; 83
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	8f 7c       	andi	r24, 0xCF	; 207
     622:	8c 93       	st	X, r24
     624:	a3 e5       	ldi	r26, 0x53	; 83
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	e3 e5       	ldi	r30, 0x53	; 83
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	8f 6e       	ori	r24, 0xEF	; 239
     630:	8c 93       	st	X, r24
     632:	2c c0       	rjmp	.+88     	; 0x68c <TIMER0_VidTimerInit+0x21e>
	case (CTC_FAST_PWM_SET_OC0_ON_CTC_CLEAR_ON_TOP): TCCR0 &= CTC_OUTPUT_MASK; TCCR0 |= 0b11111111; break;
     634:	a3 e5       	ldi	r26, 0x53	; 83
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	e3 e5       	ldi	r30, 0x53	; 83
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	8f 7c       	andi	r24, 0xCF	; 207
     640:	8c 93       	st	X, r24
     642:	e3 e5       	ldi	r30, 0x53	; 83
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	20 81       	ld	r18, Z
     648:	e3 e5       	ldi	r30, 0x53	; 83
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	80 83       	st	Z, r24
     650:	1d c0       	rjmp	.+58     	; 0x68c <TIMER0_VidTimerInit+0x21e>
	case (CTC_PHASE_CORRECT_PWM_CLEAR_OC0_ON_UPCOUNTING_SET_ON_DOWNCOUNTING): TCCR0 &= CTC_OUTPUT_MASK; TCCR0 |= 0b11101111; break;
     652:	a3 e5       	ldi	r26, 0x53	; 83
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	e3 e5       	ldi	r30, 0x53	; 83
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	8f 7c       	andi	r24, 0xCF	; 207
     65e:	8c 93       	st	X, r24
     660:	a3 e5       	ldi	r26, 0x53	; 83
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	e3 e5       	ldi	r30, 0x53	; 83
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	8f 6e       	ori	r24, 0xEF	; 239
     66c:	8c 93       	st	X, r24
     66e:	0e c0       	rjmp	.+28     	; 0x68c <TIMER0_VidTimerInit+0x21e>
	case (CTC_PHASE_CORRECT_PWM_SET_OC0_ON_UPCOUNTING_CLEAR_ON_DOWNCOUNTING): TCCR0 &= CTC_OUTPUT_MASK; TCCR0 |= 0b11111111; break;
     670:	a3 e5       	ldi	r26, 0x53	; 83
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	e3 e5       	ldi	r30, 0x53	; 83
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	8f 7c       	andi	r24, 0xCF	; 207
     67c:	8c 93       	st	X, r24
     67e:	e3 e5       	ldi	r30, 0x53	; 83
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	30 81       	ld	r19, Z
     684:	e3 e5       	ldi	r30, 0x53	; 83
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	80 83       	st	Z, r24
	}

	TCCR0 &= TCCR0_MASK;
     68c:	a3 e5       	ldi	r26, 0x53	; 83
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	e3 e5       	ldi	r30, 0x53	; 83
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	88 7f       	andi	r24, 0xF8	; 248
     698:	8c 93       	st	X, r24
	TCCR0 |= Copy_EnumPrescaler;
     69a:	a3 e5       	ldi	r26, 0x53	; 83
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e3 e5       	ldi	r30, 0x53	; 83
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	90 81       	ld	r25, Z
     6a4:	8a 81       	ldd	r24, Y+2	; 0x02
     6a6:	89 2b       	or	r24, r25
     6a8:	8c 93       	st	X, r24
}
     6aa:	2a 96       	adiw	r28, 0x0a	; 10
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	cd bf       	out	0x3d, r28	; 61
     6b6:	cf 91       	pop	r28
     6b8:	df 91       	pop	r29
     6ba:	08 95       	ret

000006bc <TIMER0_VidSetTimerValue>:

void TIMER0_VidSetTimerValue(u8 Copy_u8Value)
{
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <TIMER0_VidSetTimerValue+0x6>
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 &= 0b00000000;
     6c8:	e2 e5       	ldi	r30, 0x52	; 82
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	e2 e5       	ldi	r30, 0x52	; 82
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	10 82       	st	Z, r1

	TCNT0 |= Copy_u8Value;
     6d4:	a2 e5       	ldi	r26, 0x52	; 82
     6d6:	b0 e0       	ldi	r27, 0x00	; 0
     6d8:	e2 e5       	ldi	r30, 0x52	; 82
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	90 81       	ld	r25, Z
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	89 2b       	or	r24, r25
     6e2:	8c 93       	st	X, r24
}
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	08 95       	ret

000006ee <TIMER0_VidSetCompareMatchValue>:

void TIMER0_VidSetCompareMatchValue(u8 Copy_u8Value)
{
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <TIMER0_VidSetCompareMatchValue+0x6>
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	89 83       	std	Y+1, r24	; 0x01
	OCR0 &= 0b00000000;
     6fa:	ec e5       	ldi	r30, 0x5C	; 92
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	ec e5       	ldi	r30, 0x5C	; 92
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	10 82       	st	Z, r1

	OCR0 |= Copy_u8Value;
     706:	ac e5       	ldi	r26, 0x5C	; 92
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	ec e5       	ldi	r30, 0x5C	; 92
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	90 81       	ld	r25, Z
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	89 2b       	or	r24, r25
     714:	8c 93       	st	X, r24
}
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	cf 91       	pop	r28
     71c:	df 91       	pop	r29
     71e:	08 95       	ret

00000720 <TIMER1_VidInit>:

/*Post Build Configuration for Timer0 */
void TIMER1_VidInit(void)
{
     720:	df 93       	push	r29
     722:	cf 93       	push	r28
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62

}
     728:	cf 91       	pop	r28
     72a:	df 91       	pop	r29
     72c:	08 95       	ret

0000072e <TIMER2_VidInit>:

/*PreBuild Configuration for Timer2 */
void TIMER2_VidInit(void)
{
     72e:	df 93       	push	r29
     730:	cf 93       	push	r28
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
	/*Choose Timer0 mode*/
#if TIMER2_MODE == NORMAL_MODE
	CLR_BIT(TCCR0 , TCCR0_WGM00);
     736:	a3 e5       	ldi	r26, 0x53	; 83
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	e3 e5       	ldi	r30, 0x53	; 83
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	8f 7b       	andi	r24, 0xBF	; 191
     742:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_WGM01);
     744:	a3 e5       	ldi	r26, 0x53	; 83
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	e3 e5       	ldi	r30, 0x53	; 83
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	87 7f       	andi	r24, 0xF7	; 247
     750:	8c 93       	st	X, r24
#else
#error "Wrong TIMER2_MODE Configuration option"
#endif

#if TIMER2_COMPARE_OUTPUT_MODE == NORMAL_OC2_DISCONNECTED
	TCCR2 &= CTC_OUTPUT_MASK;
     752:	a5 e4       	ldi	r26, 0x45	; 69
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	e5 e4       	ldi	r30, 0x45	; 69
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	8f 7c       	andi	r24, 0xCF	; 207
     75e:	8c 93       	st	X, r24
#else
#error "Wrong TIMER2_COMPARE_OUTPUT_MODE Configuration option"
#endif

	/*Set Prescaler*/
	TCCR2 &= TCCR2_MASK;
     760:	a5 e4       	ldi	r26, 0x45	; 69
     762:	b0 e0       	ldi	r27, 0x00	; 0
     764:	e5 e4       	ldi	r30, 0x45	; 69
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	88 7f       	andi	r24, 0xF8	; 248
     76c:	8c 93       	st	X, r24
	TCCR2 |= TIMER_PRESCALER;
     76e:	a5 e4       	ldi	r26, 0x45	; 69
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	e5 e4       	ldi	r30, 0x45	; 69
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	82 60       	ori	r24, 0x02	; 2
     77a:	8c 93       	st	X, r24
}
     77c:	cf 91       	pop	r28
     77e:	df 91       	pop	r29
     780:	08 95       	ret

00000782 <TIMER2_VidTimerInit>:

/*Post Build Configuration for Timer2 */

void TIMER2_VidTimerInit(TIMER_MODES_TYPE Copy_EnumMode , TIMER_PRESCALER_TYPE Copy_EnumPrescaler , TIMER2_CTC_MODE_TYPE Copy_CTC_Modes)
{
     782:	df 93       	push	r29
     784:	cf 93       	push	r28
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	2a 97       	sbiw	r28, 0x0a	; 10
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	89 83       	std	Y+1, r24	; 0x01
     798:	6a 83       	std	Y+2, r22	; 0x02
     79a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_EnumMode)
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	28 2f       	mov	r18, r24
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	3a 87       	std	Y+10, r19	; 0x0a
     7a4:	29 87       	std	Y+9, r18	; 0x09
     7a6:	89 85       	ldd	r24, Y+9	; 0x09
     7a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	91 05       	cpc	r25, r1
     7ae:	21 f1       	breq	.+72     	; 0x7f8 <TIMER2_VidTimerInit+0x76>
     7b0:	29 85       	ldd	r18, Y+9	; 0x09
     7b2:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b4:	22 30       	cpi	r18, 0x02	; 2
     7b6:	31 05       	cpc	r19, r1
     7b8:	2c f4       	brge	.+10     	; 0x7c4 <TIMER2_VidTimerInit+0x42>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     7be:	00 97       	sbiw	r24, 0x00	; 0
     7c0:	61 f0       	breq	.+24     	; 0x7da <TIMER2_VidTimerInit+0x58>
     7c2:	46 c0       	rjmp	.+140    	; 0x850 <TIMER2_VidTimerInit+0xce>
     7c4:	29 85       	ldd	r18, Y+9	; 0x09
     7c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7c8:	22 30       	cpi	r18, 0x02	; 2
     7ca:	31 05       	cpc	r19, r1
     7cc:	21 f1       	breq	.+72     	; 0x816 <TIMER2_VidTimerInit+0x94>
     7ce:	89 85       	ldd	r24, Y+9	; 0x09
     7d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d2:	83 30       	cpi	r24, 0x03	; 3
     7d4:	91 05       	cpc	r25, r1
     7d6:	71 f1       	breq	.+92     	; 0x834 <TIMER2_VidTimerInit+0xb2>
     7d8:	3b c0       	rjmp	.+118    	; 0x850 <TIMER2_VidTimerInit+0xce>
	{
	case (NORMAL) : CLR_BIT(TCCR0 , TCCR0_WGM00); CLR_BIT(TCCR0 , TCCR0_WGM01); break;
     7da:	a3 e5       	ldi	r26, 0x53	; 83
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 e5       	ldi	r30, 0x53	; 83
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	8f 7b       	andi	r24, 0xBF	; 191
     7e6:	8c 93       	st	X, r24
     7e8:	a3 e5       	ldi	r26, 0x53	; 83
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	e3 e5       	ldi	r30, 0x53	; 83
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	87 7f       	andi	r24, 0xF7	; 247
     7f4:	8c 93       	st	X, r24
     7f6:	2c c0       	rjmp	.+88     	; 0x850 <TIMER2_VidTimerInit+0xce>
	case (PWM_PHASE_CORRECT) : SET_BIT(TCCR0 , TCCR0_WGM00); CLR_BIT(TCCR0 , TCCR0_WGM01); break;
     7f8:	a3 e5       	ldi	r26, 0x53	; 83
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	e3 e5       	ldi	r30, 0x53	; 83
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	80 81       	ld	r24, Z
     802:	80 64       	ori	r24, 0x40	; 64
     804:	8c 93       	st	X, r24
     806:	a3 e5       	ldi	r26, 0x53	; 83
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	e3 e5       	ldi	r30, 0x53	; 83
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	87 7f       	andi	r24, 0xF7	; 247
     812:	8c 93       	st	X, r24
     814:	1d c0       	rjmp	.+58     	; 0x850 <TIMER2_VidTimerInit+0xce>
	case (CTC) : CLR_BIT(TCCR0 , TCCR0_WGM00); SET_BIT(TCCR0 , TCCR0_WGM01); break;
     816:	a3 e5       	ldi	r26, 0x53	; 83
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	e3 e5       	ldi	r30, 0x53	; 83
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	8f 7b       	andi	r24, 0xBF	; 191
     822:	8c 93       	st	X, r24
     824:	a3 e5       	ldi	r26, 0x53	; 83
     826:	b0 e0       	ldi	r27, 0x00	; 0
     828:	e3 e5       	ldi	r30, 0x53	; 83
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	88 60       	ori	r24, 0x08	; 8
     830:	8c 93       	st	X, r24
     832:	0e c0       	rjmp	.+28     	; 0x850 <TIMER2_VidTimerInit+0xce>
	case (PWM_FAST) : SET_BIT(TCCR0 , TCCR0_WGM00); SET_BIT(TCCR0 , TCCR0_WGM01); break;
     834:	a3 e5       	ldi	r26, 0x53	; 83
     836:	b0 e0       	ldi	r27, 0x00	; 0
     838:	e3 e5       	ldi	r30, 0x53	; 83
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	80 64       	ori	r24, 0x40	; 64
     840:	8c 93       	st	X, r24
     842:	a3 e5       	ldi	r26, 0x53	; 83
     844:	b0 e0       	ldi	r27, 0x00	; 0
     846:	e3 e5       	ldi	r30, 0x53	; 83
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	88 60       	ori	r24, 0x08	; 8
     84e:	8c 93       	st	X, r24
	}

	switch(Copy_CTC_Modes)
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	28 2f       	mov	r18, r24
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	38 87       	std	Y+8, r19	; 0x08
     858:	2f 83       	std	Y+7, r18	; 0x07
     85a:	8f 81       	ldd	r24, Y+7	; 0x07
     85c:	98 85       	ldd	r25, Y+8	; 0x08
     85e:	83 30       	cpi	r24, 0x03	; 3
     860:	91 05       	cpc	r25, r1
     862:	09 f4       	brne	.+2      	; 0x866 <__stack+0x7>
     864:	53 c0       	rjmp	.+166    	; 0x90c <__stack+0xad>
     866:	2f 81       	ldd	r18, Y+7	; 0x07
     868:	38 85       	ldd	r19, Y+8	; 0x08
     86a:	24 30       	cpi	r18, 0x04	; 4
     86c:	31 05       	cpc	r19, r1
     86e:	7c f4       	brge	.+30     	; 0x88e <__stack+0x2f>
     870:	8f 81       	ldd	r24, Y+7	; 0x07
     872:	98 85       	ldd	r25, Y+8	; 0x08
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	91 05       	cpc	r25, r1
     878:	59 f1       	breq	.+86     	; 0x8d0 <__stack+0x71>
     87a:	2f 81       	ldd	r18, Y+7	; 0x07
     87c:	38 85       	ldd	r19, Y+8	; 0x08
     87e:	22 30       	cpi	r18, 0x02	; 2
     880:	31 05       	cpc	r19, r1
     882:	ac f5       	brge	.+106    	; 0x8ee <__stack+0x8f>
     884:	8f 81       	ldd	r24, Y+7	; 0x07
     886:	98 85       	ldd	r25, Y+8	; 0x08
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	d1 f0       	breq	.+52     	; 0x8c0 <__stack+0x61>
     88c:	89 c0       	rjmp	.+274    	; 0x9a0 <__stack+0x141>
     88e:	2f 81       	ldd	r18, Y+7	; 0x07
     890:	38 85       	ldd	r19, Y+8	; 0x08
     892:	25 30       	cpi	r18, 0x05	; 5
     894:	31 05       	cpc	r19, r1
     896:	09 f4       	brne	.+2      	; 0x89a <__stack+0x3b>
     898:	57 c0       	rjmp	.+174    	; 0x948 <__stack+0xe9>
     89a:	8f 81       	ldd	r24, Y+7	; 0x07
     89c:	98 85       	ldd	r25, Y+8	; 0x08
     89e:	85 30       	cpi	r24, 0x05	; 5
     8a0:	91 05       	cpc	r25, r1
     8a2:	0c f4       	brge	.+2      	; 0x8a6 <__stack+0x47>
     8a4:	42 c0       	rjmp	.+132    	; 0x92a <__stack+0xcb>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	26 30       	cpi	r18, 0x06	; 6
     8ac:	31 05       	cpc	r19, r1
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <__stack+0x53>
     8b0:	5a c0       	rjmp	.+180    	; 0x966 <__stack+0x107>
     8b2:	8f 81       	ldd	r24, Y+7	; 0x07
     8b4:	98 85       	ldd	r25, Y+8	; 0x08
     8b6:	87 30       	cpi	r24, 0x07	; 7
     8b8:	91 05       	cpc	r25, r1
     8ba:	09 f4       	brne	.+2      	; 0x8be <__stack+0x5f>
     8bc:	63 c0       	rjmp	.+198    	; 0x984 <__stack+0x125>
     8be:	70 c0       	rjmp	.+224    	; 0x9a0 <__stack+0x141>
	{
	case (OC2_DISCONNECTED) : TCCR2 &= CTC_OUTPUT_MASK; break;
     8c0:	a5 e4       	ldi	r26, 0x45	; 69
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	e5 e4       	ldi	r30, 0x45	; 69
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	8f 7c       	andi	r24, 0xCF	; 207
     8cc:	8c 93       	st	X, r24
     8ce:	68 c0       	rjmp	.+208    	; 0x9a0 <__stack+0x141>
	case (CTC_NON_PWM_TOGGLE_OC2_ON_CTC) : TCCR2 &= CTC_OUTPUT_MASK; TCCR2 |= 0b11011111; break;
     8d0:	a5 e4       	ldi	r26, 0x45	; 69
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	e5 e4       	ldi	r30, 0x45	; 69
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	8f 7c       	andi	r24, 0xCF	; 207
     8dc:	8c 93       	st	X, r24
     8de:	a5 e4       	ldi	r26, 0x45	; 69
     8e0:	b0 e0       	ldi	r27, 0x00	; 0
     8e2:	e5 e4       	ldi	r30, 0x45	; 69
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	8f 6d       	ori	r24, 0xDF	; 223
     8ea:	8c 93       	st	X, r24
     8ec:	59 c0       	rjmp	.+178    	; 0x9a0 <__stack+0x141>
	case (CTC_NON_PWM_CLEAR_OC2_ON_CTC): TCCR2 &= CTC_OUTPUT_MASK; TCCR2 |= 0b11101111; break;
     8ee:	a5 e4       	ldi	r26, 0x45	; 69
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
     8f2:	e5 e4       	ldi	r30, 0x45	; 69
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	8f 7c       	andi	r24, 0xCF	; 207
     8fa:	8c 93       	st	X, r24
     8fc:	a5 e4       	ldi	r26, 0x45	; 69
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	e5 e4       	ldi	r30, 0x45	; 69
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	8f 6e       	ori	r24, 0xEF	; 239
     908:	8c 93       	st	X, r24
     90a:	4a c0       	rjmp	.+148    	; 0x9a0 <__stack+0x141>
	case (CTC_NON_PWM_SET_OC2_ON_CTC): TCCR2 &= CTC_OUTPUT_MASK; TCCR2 |= 0b11111111; break;
     90c:	a5 e4       	ldi	r26, 0x45	; 69
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	e5 e4       	ldi	r30, 0x45	; 69
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	8f 7c       	andi	r24, 0xCF	; 207
     918:	8c 93       	st	X, r24
     91a:	e5 e4       	ldi	r30, 0x45	; 69
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	90 81       	ld	r25, Z
     920:	e5 e4       	ldi	r30, 0x45	; 69
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	80 83       	st	Z, r24
     928:	3b c0       	rjmp	.+118    	; 0x9a0 <__stack+0x141>
	case (CTC_FAST_PWM_CLEAR_OC2_ON_CTC_SET_ON_TOP): TCCR2 &= CTC_OUTPUT_MASK; TCCR2 |= 0b11101111; break;
     92a:	a5 e4       	ldi	r26, 0x45	; 69
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	e5 e4       	ldi	r30, 0x45	; 69
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	80 81       	ld	r24, Z
     934:	8f 7c       	andi	r24, 0xCF	; 207
     936:	8c 93       	st	X, r24
     938:	a5 e4       	ldi	r26, 0x45	; 69
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	e5 e4       	ldi	r30, 0x45	; 69
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	8f 6e       	ori	r24, 0xEF	; 239
     944:	8c 93       	st	X, r24
     946:	2c c0       	rjmp	.+88     	; 0x9a0 <__stack+0x141>
	case (CTC_FAST_PWM_SET_OC2_ON_CTC_CLEAR_ON_TOP): TCCR2 &= CTC_OUTPUT_MASK; TCCR2 |= 0b11111111; break;
     948:	a5 e4       	ldi	r26, 0x45	; 69
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	e5 e4       	ldi	r30, 0x45	; 69
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	8f 7c       	andi	r24, 0xCF	; 207
     954:	8c 93       	st	X, r24
     956:	e5 e4       	ldi	r30, 0x45	; 69
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	20 81       	ld	r18, Z
     95c:	e5 e4       	ldi	r30, 0x45	; 69
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	80 83       	st	Z, r24
     964:	1d c0       	rjmp	.+58     	; 0x9a0 <__stack+0x141>
	case (CTC_PHASE_CORRECT_PWM_CLEAR_OC2_ON_UPCOUNTING_SET_ON_DOWNCOUNTING): TCCR2 &= CTC_OUTPUT_MASK; TCCR2 |= 0b11101111; break;
     966:	a5 e4       	ldi	r26, 0x45	; 69
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e5 e4       	ldi	r30, 0x45	; 69
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 81       	ld	r24, Z
     970:	8f 7c       	andi	r24, 0xCF	; 207
     972:	8c 93       	st	X, r24
     974:	a5 e4       	ldi	r26, 0x45	; 69
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e5 e4       	ldi	r30, 0x45	; 69
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	8f 6e       	ori	r24, 0xEF	; 239
     980:	8c 93       	st	X, r24
     982:	0e c0       	rjmp	.+28     	; 0x9a0 <__stack+0x141>
	case (CTC_PHASE_CORRECT_PWM_SET_OC2_ON_UPCOUNTING_CLEAR_ON_DOWNCOUNTING): TCCR2 &= CTC_OUTPUT_MASK; TCCR2 |= 0b11111111; break;
     984:	a5 e4       	ldi	r26, 0x45	; 69
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	e5 e4       	ldi	r30, 0x45	; 69
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	8f 7c       	andi	r24, 0xCF	; 207
     990:	8c 93       	st	X, r24
     992:	e5 e4       	ldi	r30, 0x45	; 69
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	30 81       	ld	r19, Z
     998:	e5 e4       	ldi	r30, 0x45	; 69
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	8f ef       	ldi	r24, 0xFF	; 255
     99e:	80 83       	st	Z, r24
	}

	TCCR2 &= TCCR2_MASK;
     9a0:	a5 e4       	ldi	r26, 0x45	; 69
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	e5 e4       	ldi	r30, 0x45	; 69
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	88 7f       	andi	r24, 0xF8	; 248
     9ac:	8c 93       	st	X, r24
	TCCR2 |= Copy_EnumPrescaler;
     9ae:	a5 e4       	ldi	r26, 0x45	; 69
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	e5 e4       	ldi	r30, 0x45	; 69
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	90 81       	ld	r25, Z
     9b8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ba:	89 2b       	or	r24, r25
     9bc:	8c 93       	st	X, r24
}
     9be:	2a 96       	adiw	r28, 0x0a	; 10
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	cf 91       	pop	r28
     9cc:	df 91       	pop	r29
     9ce:	08 95       	ret

000009d0 <TIMER2_VidSetTimerValue>:

void TIMER2_VidSetTimerValue(u8 Copy_u8Value)
{
     9d0:	df 93       	push	r29
     9d2:	cf 93       	push	r28
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <TIMER2_VidSetTimerValue+0x6>
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 &= 0b00000000;
     9dc:	e4 e4       	ldi	r30, 0x44	; 68
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	e4 e4       	ldi	r30, 0x44	; 68
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	10 82       	st	Z, r1

	TCNT2 |= Copy_u8Value;
     9e8:	a4 e4       	ldi	r26, 0x44	; 68
     9ea:	b0 e0       	ldi	r27, 0x00	; 0
     9ec:	e4 e4       	ldi	r30, 0x44	; 68
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	90 81       	ld	r25, Z
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	89 2b       	or	r24, r25
     9f6:	8c 93       	st	X, r24
}
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	cf 91       	pop	r28
     9fe:	df 91       	pop	r29
     a00:	08 95       	ret

00000a02 <TIMER2_VidSetCompareMatchValue>:

void TIMER2_VidSetCompareMatchValue(u8 Copy_u8Value)
{
     a02:	df 93       	push	r29
     a04:	cf 93       	push	r28
     a06:	00 d0       	rcall	.+0      	; 0xa08 <TIMER2_VidSetCompareMatchValue+0x6>
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	89 83       	std	Y+1, r24	; 0x01
	OCR2 &= 0b00000000;
     a0e:	e3 e4       	ldi	r30, 0x43	; 67
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	e3 e4       	ldi	r30, 0x43	; 67
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	10 82       	st	Z, r1

	OCR2 |= Copy_u8Value;
     a1a:	a3 e4       	ldi	r26, 0x43	; 67
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	e3 e4       	ldi	r30, 0x43	; 67
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	90 81       	ld	r25, Z
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	89 2b       	or	r24, r25
     a28:	8c 93       	st	X, r24
}
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	cf 91       	pop	r28
     a30:	df 91       	pop	r29
     a32:	08 95       	ret

00000a34 <SPI_VidInitMaster>:
#include "SPI_configuration.h"
#include "SPI_private.h"
#include "SPI_interface.h"

void SPI_VidInitMaster(void)
{
     a34:	df 93       	push	r29
     a36:	cf 93       	push	r28
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
  /*Set SPI Master */
#if SPI_MASTER_ENABLE == ENABLED
	    SET_BIT(SPCR , SPCR_MSTR);
     a3c:	ad e2       	ldi	r26, 0x2D	; 45
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	ed e2       	ldi	r30, 0x2D	; 45
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	80 61       	ori	r24, 0x10	; 16
     a48:	8c 93       	st	X, r24
#error "Wrong SPI_MASTER_ENABLE Configuration option"
#endif

	    /*Set SPI Send firstly*/
#if SPI_CLOCK_POLARITY == LEADING_EDGE_SETUP_TRAILING_EDGE_SAMPLE
        SET_BIT(SPCR , SPCR_CPHA);
     a4a:	ad e2       	ldi	r26, 0x2D	; 45
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	ed e2       	ldi	r30, 0x2D	; 45
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	84 60       	ori	r24, 0x04	; 4
     a56:	8c 93       	st	X, r24
#error "Wrong SPI_CLOCK_POLARITY Configuration option"
#endif

        /*Set SPI Send at Rising edge*/
#if SPI_CLOCK_PHASE == LEADING_EDGE_RISING_TRAILING_EDGE_FALLING
        CLR_BIT(SPCR , SPCR_CPOL);
     a58:	ad e2       	ldi	r26, 0x2D	; 45
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	ed e2       	ldi	r30, 0x2D	; 45
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	87 7f       	andi	r24, 0xF7	; 247
     a64:	8c 93       	st	X, r24
#error "Wrong SPI_CLOCK_PHASE Configuration option"
#endif

     /*Set Transfer Data from LSB */
#if SPI_DATA_ORDER == LSB_TRANSMITTED
	    SET_BIT(SPCR , SPCR_DORD);
     a66:	ad e2       	ldi	r26, 0x2D	; 45
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	ed e2       	ldi	r30, 0x2D	; 45
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	80 62       	ori	r24, 0x20	; 32
     a72:	8c 93       	st	X, r24
#error "Wrong SPI_DATA_ORDER Configuration option"
#endif

	/*Set Oscillator Frequency */
#if SPI_SCK == FREQUANCY_DIVIDE_BY_4
        CLR_BIT(SPCR , SPCR_SPR0);
     a74:	ad e2       	ldi	r26, 0x2D	; 45
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	ed e2       	ldi	r30, 0x2D	; 45
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	8e 7f       	andi	r24, 0xFE	; 254
     a80:	8c 93       	st	X, r24
        CLR_BIT(SPCR , SPCR_SPR1);
     a82:	ad e2       	ldi	r26, 0x2D	; 45
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	ed e2       	ldi	r30, 0x2D	; 45
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	8d 7f       	andi	r24, 0xFD	; 253
     a8e:	8c 93       	st	X, r24
        CLR_BIT(SPSR , SPSR_SPI2X);
     a90:	ae e2       	ldi	r26, 0x2E	; 46
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	ee e2       	ldi	r30, 0x2E	; 46
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	8e 7f       	andi	r24, 0xFE	; 254
     a9c:	8c 93       	st	X, r24
#error "Wrong SPI_SCK Configuration option"
#endif

   /*Set SPI Enabled*/
#if SPI_ENABLE == ENABLED
	    SET_BIT(SPCR , SPCR_SPE);
     a9e:	ad e2       	ldi	r26, 0x2D	; 45
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	ed e2       	ldi	r30, 0x2D	; 45
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	80 64       	ori	r24, 0x40	; 64
     aaa:	8c 93       	st	X, r24
	    CLR_BIT(SPCR , SPCR_SPE);
#else
#error "Wrong SPI_ENABLE Configuration option"
#endif

}
     aac:	cf 91       	pop	r28
     aae:	df 91       	pop	r29
     ab0:	08 95       	ret

00000ab2 <SPI_VidInitSlave>:

void SPI_VidInitSlave(void)
{
     ab2:	df 93       	push	r29
     ab4:	cf 93       	push	r28
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
  /*Set SPI Slave */
CLR_BIT(SPCR , SPCR_MSTR);
     aba:	ad e2       	ldi	r26, 0x2D	; 45
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	ed e2       	ldi	r30, 0x2D	; 45
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	8f 7e       	andi	r24, 0xEF	; 239
     ac6:	8c 93       	st	X, r24

	    /*Set SPI Send firstly*/
#if SPI_CLOCK_POLARITY == LEADING_EDGE_SETUP_TRAILING_EDGE_SAMPLE
        SET_BIT(SPCR , SPCR_CPHA);
     ac8:	ad e2       	ldi	r26, 0x2D	; 45
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	ed e2       	ldi	r30, 0x2D	; 45
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	84 60       	ori	r24, 0x04	; 4
     ad4:	8c 93       	st	X, r24
#error "Wrong SPI_CLOCK_POLARITY Configuration option"
#endif

        /*Set SPI Send at Rising edge*/
#if SPI_CLOCK_PHASE == LEADING_EDGE_RISING_TRAILING_EDGE_FALLING
        CLR_BIT(SPCR , SPCR_CPOL);
     ad6:	ad e2       	ldi	r26, 0x2D	; 45
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	ed e2       	ldi	r30, 0x2D	; 45
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	87 7f       	andi	r24, 0xF7	; 247
     ae2:	8c 93       	st	X, r24
#error "Wrong SPI_CLOCK_PHASE Configuration option"
#endif

     /*Set Transfer Data from LSB */
#if SPI_DATA_ORDER == LSB_TRANSMITTED
	    SET_BIT(SPCR , SPCR_DORD);
     ae4:	ad e2       	ldi	r26, 0x2D	; 45
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	ed e2       	ldi	r30, 0x2D	; 45
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	80 62       	ori	r24, 0x20	; 32
     af0:	8c 93       	st	X, r24
#error "Wrong SPI_DATA_ORDER Configuration option"
#endif

   /*Set SPI Enabled*/
#if SPI_ENABLE == ENABLED
	    SET_BIT(SPCR , SPCR_SPE);
     af2:	ad e2       	ldi	r26, 0x2D	; 45
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	ed e2       	ldi	r30, 0x2D	; 45
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	80 64       	ori	r24, 0x40	; 64
     afe:	8c 93       	st	X, r24
	    CLR_BIT(SPCR , SPCR_SPE);
#else
#error "Wrong SPI_ENABLE Configuration option"
#endif

}
     b00:	cf 91       	pop	r28
     b02:	df 91       	pop	r29
     b04:	08 95       	ret

00000b06 <SPI_u8Transceive>:

u8 SPI_u8Transceive(u8 Copy_u8Data)
{
     b06:	df 93       	push	r29
     b08:	cf 93       	push	r28
     b0a:	0f 92       	push	r0
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	89 83       	std	Y+1, r24	; 0x01
	/*Send the data*/
	SPDR = Copy_u8Data;
     b12:	ef e2       	ldi	r30, 0x2F	; 47
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	80 83       	st	Z, r24

	/*wait (busy waiting) until transfer complete*/
	while((GET_BIT(SPSR , SPSR_SPIF))==0);
     b1a:	ee e2       	ldi	r30, 0x2E	; 46
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	88 23       	and	r24, r24
     b22:	dc f7       	brge	.-10     	; 0xb1a <SPI_u8Transceive+0x14>

	/*Get the exchange data*/
		return SPDR;
     b24:	ef e2       	ldi	r30, 0x2F	; 47
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
}
     b2a:	0f 90       	pop	r0
     b2c:	cf 91       	pop	r28
     b2e:	df 91       	pop	r29
     b30:	08 95       	ret

00000b32 <PORT_VidInit>:




void PORT_VidInit(void)
{
     b32:	df 93       	push	r29
     b34:	cf 93       	push	r28
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
     b3a:	ea e3       	ldi	r30, 0x3A	; 58
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
     b40:	e7 e3       	ldi	r30, 0x37	; 55
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
     b46:	e4 e3       	ldi	r30, 0x34	; 52
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     b4c:	e1 e3       	ldi	r30, 0x31	; 49
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	10 82       	st	Z, r1

	PORTA = PORTA_Initial_Value;
     b52:	eb e3       	ldi	r30, 0x3B	; 59
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	10 82       	st	Z, r1
	PORTB = PORTB_Initial_Value;
     b58:	e8 e3       	ldi	r30, 0x38	; 56
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	10 82       	st	Z, r1
	PORTC = PORTC_Initial_Value;
     b5e:	e5 e3       	ldi	r30, 0x35	; 53
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
	PORTD = PORTD_Initial_Value;
     b64:	e2 e3       	ldi	r30, 0x32	; 50
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1
}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <INTERRUPT_VidSetINTSource>:
static void (*ISR_VidPtrCallBackFunc[20])(void) ={NULL};

static u8 INTERRUPT_ID = 0;

void INTERRUPT_VidSetINTSource(INTERUUPT_SOURCE_TYPE Copy_EnumINTSource , INTERRUPT_STATE_TYPE Copy_EnumINTState)
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	00 d0       	rcall	.+0      	; 0xb76 <INTERRUPT_VidSetINTSource+0x6>
     b76:	00 d0       	rcall	.+0      	; 0xb78 <INTERRUPT_VidSetINTSource+0x8>
     b78:	00 d0       	rcall	.+0      	; 0xb7a <INTERRUPT_VidSetINTSource+0xa>
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	89 83       	std	Y+1, r24	; 0x01
     b80:	6a 83       	std	Y+2, r22	; 0x02


	if(Copy_EnumINTState == ENABLE)
     b82:	8a 81       	ldd	r24, Y+2	; 0x02
     b84:	88 23       	and	r24, r24
     b86:	09 f0       	breq	.+2      	; 0xb8a <INTERRUPT_VidSetINTSource+0x1a>
     b88:	bf c0       	rjmp	.+382    	; 0xd08 <INTERRUPT_VidSetINTSource+0x198>
	{
		switch(Copy_EnumINTSource)
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	28 2f       	mov	r18, r24
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	3e 83       	std	Y+6, r19	; 0x06
     b92:	2d 83       	std	Y+5, r18	; 0x05
     b94:	8d 81       	ldd	r24, Y+5	; 0x05
     b96:	9e 81       	ldd	r25, Y+6	; 0x06
     b98:	85 30       	cpi	r24, 0x05	; 5
     b9a:	91 05       	cpc	r25, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <INTERRUPT_VidSetINTSource+0x30>
     b9e:	7c c0       	rjmp	.+248    	; 0xc98 <INTERRUPT_VidSetINTSource+0x128>
     ba0:	2d 81       	ldd	r18, Y+5	; 0x05
     ba2:	3e 81       	ldd	r19, Y+6	; 0x06
     ba4:	26 30       	cpi	r18, 0x06	; 6
     ba6:	31 05       	cpc	r19, r1
     ba8:	24 f5       	brge	.+72     	; 0xbf2 <INTERRUPT_VidSetINTSource+0x82>
     baa:	8d 81       	ldd	r24, Y+5	; 0x05
     bac:	9e 81       	ldd	r25, Y+6	; 0x06
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	91 05       	cpc	r25, r1
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <INTERRUPT_VidSetINTSource+0x46>
     bb4:	59 c0       	rjmp	.+178    	; 0xc68 <INTERRUPT_VidSetINTSource+0xf8>
     bb6:	2d 81       	ldd	r18, Y+5	; 0x05
     bb8:	3e 81       	ldd	r19, Y+6	; 0x06
     bba:	23 30       	cpi	r18, 0x03	; 3
     bbc:	31 05       	cpc	r19, r1
     bbe:	64 f4       	brge	.+24     	; 0xbd8 <INTERRUPT_VidSetINTSource+0x68>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	9e 81       	ldd	r25, Y+6	; 0x06
     bc4:	00 97       	sbiw	r24, 0x00	; 0
     bc6:	09 f4       	brne	.+2      	; 0xbca <INTERRUPT_VidSetINTSource+0x5a>
     bc8:	3f c0       	rjmp	.+126    	; 0xc48 <INTERRUPT_VidSetINTSource+0xd8>
     bca:	2d 81       	ldd	r18, Y+5	; 0x05
     bcc:	3e 81       	ldd	r19, Y+6	; 0x06
     bce:	21 30       	cpi	r18, 0x01	; 1
     bd0:	31 05       	cpc	r19, r1
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <INTERRUPT_VidSetINTSource+0x66>
     bd4:	41 c0       	rjmp	.+130    	; 0xc58 <INTERRUPT_VidSetINTSource+0xe8>
     bd6:	5a c1       	rjmp	.+692    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
     bd8:	8d 81       	ldd	r24, Y+5	; 0x05
     bda:	9e 81       	ldd	r25, Y+6	; 0x06
     bdc:	83 30       	cpi	r24, 0x03	; 3
     bde:	91 05       	cpc	r25, r1
     be0:	09 f4       	brne	.+2      	; 0xbe4 <INTERRUPT_VidSetINTSource+0x74>
     be2:	4a c0       	rjmp	.+148    	; 0xc78 <INTERRUPT_VidSetINTSource+0x108>
     be4:	2d 81       	ldd	r18, Y+5	; 0x05
     be6:	3e 81       	ldd	r19, Y+6	; 0x06
     be8:	24 30       	cpi	r18, 0x04	; 4
     bea:	31 05       	cpc	r19, r1
     bec:	09 f4       	brne	.+2      	; 0xbf0 <INTERRUPT_VidSetINTSource+0x80>
     bee:	4c c0       	rjmp	.+152    	; 0xc88 <INTERRUPT_VidSetINTSource+0x118>
     bf0:	4d c1       	rjmp	.+666    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
     bf2:	8d 81       	ldd	r24, Y+5	; 0x05
     bf4:	9e 81       	ldd	r25, Y+6	; 0x06
     bf6:	88 30       	cpi	r24, 0x08	; 8
     bf8:	91 05       	cpc	r25, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <INTERRUPT_VidSetINTSource+0x8e>
     bfc:	65 c0       	rjmp	.+202    	; 0xcc8 <INTERRUPT_VidSetINTSource+0x158>
     bfe:	2d 81       	ldd	r18, Y+5	; 0x05
     c00:	3e 81       	ldd	r19, Y+6	; 0x06
     c02:	29 30       	cpi	r18, 0x09	; 9
     c04:	31 05       	cpc	r19, r1
     c06:	6c f4       	brge	.+26     	; 0xc22 <INTERRUPT_VidSetINTSource+0xb2>
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	9e 81       	ldd	r25, Y+6	; 0x06
     c0c:	86 30       	cpi	r24, 0x06	; 6
     c0e:	91 05       	cpc	r25, r1
     c10:	09 f4       	brne	.+2      	; 0xc14 <INTERRUPT_VidSetINTSource+0xa4>
     c12:	4a c0       	rjmp	.+148    	; 0xca8 <INTERRUPT_VidSetINTSource+0x138>
     c14:	2d 81       	ldd	r18, Y+5	; 0x05
     c16:	3e 81       	ldd	r19, Y+6	; 0x06
     c18:	27 30       	cpi	r18, 0x07	; 7
     c1a:	31 05       	cpc	r19, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <INTERRUPT_VidSetINTSource+0xb0>
     c1e:	4c c0       	rjmp	.+152    	; 0xcb8 <INTERRUPT_VidSetINTSource+0x148>
     c20:	35 c1       	rjmp	.+618    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
     c22:	8d 81       	ldd	r24, Y+5	; 0x05
     c24:	9e 81       	ldd	r25, Y+6	; 0x06
     c26:	8a 30       	cpi	r24, 0x0A	; 10
     c28:	91 05       	cpc	r25, r1
     c2a:	09 f4       	brne	.+2      	; 0xc2e <INTERRUPT_VidSetINTSource+0xbe>
     c2c:	5d c0       	rjmp	.+186    	; 0xce8 <INTERRUPT_VidSetINTSource+0x178>
     c2e:	2d 81       	ldd	r18, Y+5	; 0x05
     c30:	3e 81       	ldd	r19, Y+6	; 0x06
     c32:	2a 30       	cpi	r18, 0x0A	; 10
     c34:	31 05       	cpc	r19, r1
     c36:	0c f4       	brge	.+2      	; 0xc3a <INTERRUPT_VidSetINTSource+0xca>
     c38:	4f c0       	rjmp	.+158    	; 0xcd8 <INTERRUPT_VidSetINTSource+0x168>
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	8b 30       	cpi	r24, 0x0B	; 11
     c40:	91 05       	cpc	r25, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <INTERRUPT_VidSetINTSource+0xd6>
     c44:	59 c0       	rjmp	.+178    	; 0xcf8 <INTERRUPT_VidSetINTSource+0x188>
     c46:	22 c1       	rjmp	.+580    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		{
		case (EXTERNAL_INT0): SET_BIT(GICR , GICR_INT0); break;
     c48:	ab e5       	ldi	r26, 0x5B	; 91
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	eb e5       	ldi	r30, 0x5B	; 91
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 64       	ori	r24, 0x40	; 64
     c54:	8c 93       	st	X, r24
     c56:	1a c1       	rjmp	.+564    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (EXTERNAL_INT1): SET_BIT(GICR , GICR_INT1); break;
     c58:	ab e5       	ldi	r26, 0x5B	; 91
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	eb e5       	ldi	r30, 0x5B	; 91
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 68       	ori	r24, 0x80	; 128
     c64:	8c 93       	st	X, r24
     c66:	12 c1       	rjmp	.+548    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (EXTERNAL_INT2): SET_BIT(GICR , GICR_INT2); break;
     c68:	ab e5       	ldi	r26, 0x5B	; 91
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	eb e5       	ldi	r30, 0x5B	; 91
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	80 62       	ori	r24, 0x20	; 32
     c74:	8c 93       	st	X, r24
     c76:	0a c1       	rjmp	.+532    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER2_CTC):    SET_BIT(TIMSK , TIMSK_OCIE2); break;
     c78:	a9 e5       	ldi	r26, 0x59	; 89
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e9 e5       	ldi	r30, 0x59	; 89
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	80 68       	ori	r24, 0x80	; 128
     c84:	8c 93       	st	X, r24
     c86:	02 c1       	rjmp	.+516    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER2_OVF):    SET_BIT(TIMSK , TIMSK_TOIE2); break;
     c88:	a9 e5       	ldi	r26, 0x59	; 89
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e9 e5       	ldi	r30, 0x59	; 89
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	80 64       	ori	r24, 0x40	; 64
     c94:	8c 93       	st	X, r24
     c96:	fa c0       	rjmp	.+500    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER1_ICU):    SET_BIT(TIMSK , TIMSK_TICIE1); break;
     c98:	a9 e5       	ldi	r26, 0x59	; 89
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e9 e5       	ldi	r30, 0x59	; 89
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	80 62       	ori	r24, 0x20	; 32
     ca4:	8c 93       	st	X, r24
     ca6:	f2 c0       	rjmp	.+484    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER1_CTC_A):  SET_BIT(TIMSK , TIMSK_OCIE1A); break;
     ca8:	a9 e5       	ldi	r26, 0x59	; 89
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e9 e5       	ldi	r30, 0x59	; 89
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	80 61       	ori	r24, 0x10	; 16
     cb4:	8c 93       	st	X, r24
     cb6:	ea c0       	rjmp	.+468    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER1_CTC_B):  SET_BIT(TIMSK , TIMSK_OCIE1B); break;
     cb8:	a9 e5       	ldi	r26, 0x59	; 89
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e9 e5       	ldi	r30, 0x59	; 89
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	88 60       	ori	r24, 0x08	; 8
     cc4:	8c 93       	st	X, r24
     cc6:	e2 c0       	rjmp	.+452    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER1_OVF):    SET_BIT(TIMSK , TIMSK_TOIE1); break;
     cc8:	a9 e5       	ldi	r26, 0x59	; 89
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e9 e5       	ldi	r30, 0x59	; 89
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	84 60       	ori	r24, 0x04	; 4
     cd4:	8c 93       	st	X, r24
     cd6:	da c0       	rjmp	.+436    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER0_CTC):    SET_BIT(TIMSK , TIMSK_OCIE0); break;
     cd8:	a9 e5       	ldi	r26, 0x59	; 89
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e9 e5       	ldi	r30, 0x59	; 89
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	82 60       	ori	r24, 0x02	; 2
     ce4:	8c 93       	st	X, r24
     ce6:	d2 c0       	rjmp	.+420    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER0_OVF):    SET_BIT(TIMSK , TIMSK_TOIE0); break;
     ce8:	a9 e5       	ldi	r26, 0x59	; 89
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e9 e5       	ldi	r30, 0x59	; 89
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	81 60       	ori	r24, 0x01	; 1
     cf4:	8c 93       	st	X, r24
     cf6:	ca c0       	rjmp	.+404    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (ADC_CONVERSION_COMPLETE): SET_BIT(ADCSRA , ADCSRA_ADIE); break;
     cf8:	a6 e2       	ldi	r26, 0x26	; 38
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e6 e2       	ldi	r30, 0x26	; 38
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	88 60       	ori	r24, 0x08	; 8
     d04:	8c 93       	st	X, r24
     d06:	c2 c0       	rjmp	.+388    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		}
	}
	else if(Copy_EnumINTState == ENABLE)
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	88 23       	and	r24, r24
     d0c:	09 f0       	breq	.+2      	; 0xd10 <INTERRUPT_VidSetINTSource+0x1a0>
     d0e:	be c0       	rjmp	.+380    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
	{
		switch(Copy_EnumINTSource)
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3c 83       	std	Y+4, r19	; 0x04
     d18:	2b 83       	std	Y+3, r18	; 0x03
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	9c 81       	ldd	r25, Y+4	; 0x04
     d1e:	85 30       	cpi	r24, 0x05	; 5
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <INTERRUPT_VidSetINTSource+0x1b6>
     d24:	7c c0       	rjmp	.+248    	; 0xe1e <INTERRUPT_VidSetINTSource+0x2ae>
     d26:	2b 81       	ldd	r18, Y+3	; 0x03
     d28:	3c 81       	ldd	r19, Y+4	; 0x04
     d2a:	26 30       	cpi	r18, 0x06	; 6
     d2c:	31 05       	cpc	r19, r1
     d2e:	24 f5       	brge	.+72     	; 0xd78 <INTERRUPT_VidSetINTSource+0x208>
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	91 05       	cpc	r25, r1
     d38:	09 f4       	brne	.+2      	; 0xd3c <INTERRUPT_VidSetINTSource+0x1cc>
     d3a:	59 c0       	rjmp	.+178    	; 0xdee <INTERRUPT_VidSetINTSource+0x27e>
     d3c:	2b 81       	ldd	r18, Y+3	; 0x03
     d3e:	3c 81       	ldd	r19, Y+4	; 0x04
     d40:	23 30       	cpi	r18, 0x03	; 3
     d42:	31 05       	cpc	r19, r1
     d44:	64 f4       	brge	.+24     	; 0xd5e <INTERRUPT_VidSetINTSource+0x1ee>
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	09 f4       	brne	.+2      	; 0xd50 <INTERRUPT_VidSetINTSource+0x1e0>
     d4e:	3f c0       	rjmp	.+126    	; 0xdce <INTERRUPT_VidSetINTSource+0x25e>
     d50:	2b 81       	ldd	r18, Y+3	; 0x03
     d52:	3c 81       	ldd	r19, Y+4	; 0x04
     d54:	21 30       	cpi	r18, 0x01	; 1
     d56:	31 05       	cpc	r19, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <INTERRUPT_VidSetINTSource+0x1ec>
     d5a:	41 c0       	rjmp	.+130    	; 0xdde <INTERRUPT_VidSetINTSource+0x26e>
     d5c:	97 c0       	rjmp	.+302    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	83 30       	cpi	r24, 0x03	; 3
     d64:	91 05       	cpc	r25, r1
     d66:	09 f4       	brne	.+2      	; 0xd6a <INTERRUPT_VidSetINTSource+0x1fa>
     d68:	4a c0       	rjmp	.+148    	; 0xdfe <INTERRUPT_VidSetINTSource+0x28e>
     d6a:	2b 81       	ldd	r18, Y+3	; 0x03
     d6c:	3c 81       	ldd	r19, Y+4	; 0x04
     d6e:	24 30       	cpi	r18, 0x04	; 4
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <INTERRUPT_VidSetINTSource+0x206>
     d74:	4c c0       	rjmp	.+152    	; 0xe0e <INTERRUPT_VidSetINTSource+0x29e>
     d76:	8a c0       	rjmp	.+276    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	9c 81       	ldd	r25, Y+4	; 0x04
     d7c:	88 30       	cpi	r24, 0x08	; 8
     d7e:	91 05       	cpc	r25, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <INTERRUPT_VidSetINTSource+0x214>
     d82:	65 c0       	rjmp	.+202    	; 0xe4e <INTERRUPT_VidSetINTSource+0x2de>
     d84:	2b 81       	ldd	r18, Y+3	; 0x03
     d86:	3c 81       	ldd	r19, Y+4	; 0x04
     d88:	29 30       	cpi	r18, 0x09	; 9
     d8a:	31 05       	cpc	r19, r1
     d8c:	6c f4       	brge	.+26     	; 0xda8 <INTERRUPT_VidSetINTSource+0x238>
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	86 30       	cpi	r24, 0x06	; 6
     d94:	91 05       	cpc	r25, r1
     d96:	09 f4       	brne	.+2      	; 0xd9a <INTERRUPT_VidSetINTSource+0x22a>
     d98:	4a c0       	rjmp	.+148    	; 0xe2e <INTERRUPT_VidSetINTSource+0x2be>
     d9a:	2b 81       	ldd	r18, Y+3	; 0x03
     d9c:	3c 81       	ldd	r19, Y+4	; 0x04
     d9e:	27 30       	cpi	r18, 0x07	; 7
     da0:	31 05       	cpc	r19, r1
     da2:	09 f4       	brne	.+2      	; 0xda6 <INTERRUPT_VidSetINTSource+0x236>
     da4:	4c c0       	rjmp	.+152    	; 0xe3e <INTERRUPT_VidSetINTSource+0x2ce>
     da6:	72 c0       	rjmp	.+228    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	8a 30       	cpi	r24, 0x0A	; 10
     dae:	91 05       	cpc	r25, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <INTERRUPT_VidSetINTSource+0x244>
     db2:	5d c0       	rjmp	.+186    	; 0xe6e <INTERRUPT_VidSetINTSource+0x2fe>
     db4:	2b 81       	ldd	r18, Y+3	; 0x03
     db6:	3c 81       	ldd	r19, Y+4	; 0x04
     db8:	2a 30       	cpi	r18, 0x0A	; 10
     dba:	31 05       	cpc	r19, r1
     dbc:	0c f4       	brge	.+2      	; 0xdc0 <INTERRUPT_VidSetINTSource+0x250>
     dbe:	4f c0       	rjmp	.+158    	; 0xe5e <INTERRUPT_VidSetINTSource+0x2ee>
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	9c 81       	ldd	r25, Y+4	; 0x04
     dc4:	8b 30       	cpi	r24, 0x0B	; 11
     dc6:	91 05       	cpc	r25, r1
     dc8:	09 f4       	brne	.+2      	; 0xdcc <INTERRUPT_VidSetINTSource+0x25c>
     dca:	59 c0       	rjmp	.+178    	; 0xe7e <INTERRUPT_VidSetINTSource+0x30e>
     dcc:	5f c0       	rjmp	.+190    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		{
		case (EXTERNAL_INT0): CLR_BIT(GICR , GICR_INT0); break;
     dce:	ab e5       	ldi	r26, 0x5B	; 91
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	eb e5       	ldi	r30, 0x5B	; 91
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	8f 7b       	andi	r24, 0xBF	; 191
     dda:	8c 93       	st	X, r24
     ddc:	57 c0       	rjmp	.+174    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (EXTERNAL_INT1): CLR_BIT(GICR , GICR_INT1); break;
     dde:	ab e5       	ldi	r26, 0x5B	; 91
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	eb e5       	ldi	r30, 0x5B	; 91
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8f 77       	andi	r24, 0x7F	; 127
     dea:	8c 93       	st	X, r24
     dec:	4f c0       	rjmp	.+158    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (EXTERNAL_INT2): CLR_BIT(GICR , GICR_INT2); break;
     dee:	ab e5       	ldi	r26, 0x5B	; 91
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	eb e5       	ldi	r30, 0x5B	; 91
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8f 7d       	andi	r24, 0xDF	; 223
     dfa:	8c 93       	st	X, r24
     dfc:	47 c0       	rjmp	.+142    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER2_CTC):    CLR_BIT(TIMSK , TIMSK_OCIE2); break;
     dfe:	a9 e5       	ldi	r26, 0x59	; 89
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e9 e5       	ldi	r30, 0x59	; 89
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	8f 77       	andi	r24, 0x7F	; 127
     e0a:	8c 93       	st	X, r24
     e0c:	3f c0       	rjmp	.+126    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER2_OVF):    CLR_BIT(TIMSK , TIMSK_TOIE2); break;
     e0e:	a9 e5       	ldi	r26, 0x59	; 89
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e9 e5       	ldi	r30, 0x59	; 89
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8f 7b       	andi	r24, 0xBF	; 191
     e1a:	8c 93       	st	X, r24
     e1c:	37 c0       	rjmp	.+110    	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER1_ICU):    CLR_BIT(TIMSK , TIMSK_TICIE1); break;
     e1e:	a9 e5       	ldi	r26, 0x59	; 89
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e9 e5       	ldi	r30, 0x59	; 89
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8f 7d       	andi	r24, 0xDF	; 223
     e2a:	8c 93       	st	X, r24
     e2c:	2f c0       	rjmp	.+94     	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER1_CTC_A):  CLR_BIT(TIMSK , TIMSK_OCIE1A); break;
     e2e:	a9 e5       	ldi	r26, 0x59	; 89
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e9 e5       	ldi	r30, 0x59	; 89
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	8f 7e       	andi	r24, 0xEF	; 239
     e3a:	8c 93       	st	X, r24
     e3c:	27 c0       	rjmp	.+78     	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER1_CTC_B):  CLR_BIT(TIMSK , TIMSK_OCIE1B); break;
     e3e:	a9 e5       	ldi	r26, 0x59	; 89
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e9 e5       	ldi	r30, 0x59	; 89
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	87 7f       	andi	r24, 0xF7	; 247
     e4a:	8c 93       	st	X, r24
     e4c:	1f c0       	rjmp	.+62     	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER1_OVF):    CLR_BIT(TIMSK , TIMSK_TOIE1); break;
     e4e:	a9 e5       	ldi	r26, 0x59	; 89
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e9 e5       	ldi	r30, 0x59	; 89
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8b 7f       	andi	r24, 0xFB	; 251
     e5a:	8c 93       	st	X, r24
     e5c:	17 c0       	rjmp	.+46     	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER0_CTC):    CLR_BIT(TIMSK , TIMSK_OCIE0); break;
     e5e:	a9 e5       	ldi	r26, 0x59	; 89
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e9 e5       	ldi	r30, 0x59	; 89
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8d 7f       	andi	r24, 0xFD	; 253
     e6a:	8c 93       	st	X, r24
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (TIMER0_OVF):    CLR_BIT(TIMSK , TIMSK_TOIE0); break;
     e6e:	a9 e5       	ldi	r26, 0x59	; 89
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e9 e5       	ldi	r30, 0x59	; 89
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24
     e7c:	07 c0       	rjmp	.+14     	; 0xe8c <INTERRUPT_VidSetINTSource+0x31c>
		case (ADC_CONVERSION_COMPLETE): CLR_BIT(ADCSRA , ADCSRA_ADIE); break;
     e7e:	a6 e2       	ldi	r26, 0x26	; 38
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e6 e2       	ldi	r30, 0x26	; 38
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	87 7f       	andi	r24, 0xF7	; 247
     e8a:	8c 93       	st	X, r24
		}
	}

}
     e8c:	26 96       	adiw	r28, 0x06	; 6
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <ISR_u8SetCallBack>:

u8 ISR_u8SetCallBack(void (*Copy_VidPtrCallBackFunc)(void) , INTERUUPT_SOURCE_TYPE Copy_INTNumber)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <ISR_u8SetCallBack+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <ISR_u8SetCallBack+0x8>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	9b 83       	std	Y+3, r25	; 0x03
     eac:	8a 83       	std	Y+2, r24	; 0x02
     eae:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorStatus =OK;
     eb0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_VidPtrCallBackFunc !=NULL)
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	9b 81       	ldd	r25, Y+3	; 0x03
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	89 f0       	breq	.+34     	; 0xedc <ISR_u8SetCallBack+0x3e>
	{
		INTERRUPT_ID = Copy_INTNumber;
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	80 93 8a 00 	sts	0x008A, r24
		ISR_VidPtrCallBackFunc[INTERRUPT_ID] = Copy_VidPtrCallBackFunc;
     ec0:	80 91 8a 00 	lds	r24, 0x008A
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	fc 01       	movw	r30, r24
     ece:	ee 59       	subi	r30, 0x9E	; 158
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	9b 81       	ldd	r25, Y+3	; 0x03
     ed6:	91 83       	std	Z+1, r25	; 0x01
     ed8:	80 83       	st	Z, r24
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <ISR_u8SetCallBack+0x42>
	}
	else
	{
		Local_u8ErrorStatus =NULL_POINTER;
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
     ef0:	1f 92       	push	r1
     ef2:	0f 92       	push	r0
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	0f 92       	push	r0
     ef8:	11 24       	eor	r1, r1
     efa:	2f 93       	push	r18
     efc:	3f 93       	push	r19
     efe:	4f 93       	push	r20
     f00:	5f 93       	push	r21
     f02:	6f 93       	push	r22
     f04:	7f 93       	push	r23
     f06:	8f 93       	push	r24
     f08:	9f 93       	push	r25
     f0a:	af 93       	push	r26
     f0c:	bf 93       	push	r27
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	if(ISR_VidPtrCallBackFunc[INTERRUPT_ID] !=NULL)
     f1a:	80 91 8a 00 	lds	r24, 0x008A
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	fc 01       	movw	r30, r24
     f28:	ee 59       	subi	r30, 0x9E	; 158
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	80 81       	ld	r24, Z
     f2e:	91 81       	ldd	r25, Z+1	; 0x01
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	69 f0       	breq	.+26     	; 0xf4e <__vector_1+0x5e>
	{
		ISR_VidPtrCallBackFunc[INTERRUPT_ID]();
     f34:	80 91 8a 00 	lds	r24, 0x008A
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	fc 01       	movw	r30, r24
     f42:	ee 59       	subi	r30, 0x9E	; 158
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	01 90       	ld	r0, Z+
     f48:	f0 81       	ld	r31, Z
     f4a:	e0 2d       	mov	r30, r0
     f4c:	09 95       	icall
	}
}
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	7f 91       	pop	r23
     f60:	6f 91       	pop	r22
     f62:	5f 91       	pop	r21
     f64:	4f 91       	pop	r20
     f66:	3f 91       	pop	r19
     f68:	2f 91       	pop	r18
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	0f 90       	pop	r0
     f70:	1f 90       	pop	r1
     f72:	18 95       	reti

00000f74 <__vector_2>:


void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	ef 93       	push	r30
     f94:	ff 93       	push	r31
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	if(ISR_VidPtrCallBackFunc[INTERRUPT_ID] !=NULL)
     f9e:	80 91 8a 00 	lds	r24, 0x008A
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	fc 01       	movw	r30, r24
     fac:	ee 59       	subi	r30, 0x9E	; 158
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	69 f0       	breq	.+26     	; 0xfd2 <__vector_2+0x5e>
	{
		ISR_VidPtrCallBackFunc[INTERRUPT_ID]();
     fb8:	80 91 8a 00 	lds	r24, 0x008A
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	fc 01       	movw	r30, r24
     fc6:	ee 59       	subi	r30, 0x9E	; 158
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	01 90       	ld	r0, Z+
     fcc:	f0 81       	ld	r31, Z
     fce:	e0 2d       	mov	r30, r0
     fd0:	09 95       	icall
	}
}
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	bf 91       	pop	r27
     fdc:	af 91       	pop	r26
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	7f 91       	pop	r23
     fe4:	6f 91       	pop	r22
     fe6:	5f 91       	pop	r21
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	0f 90       	pop	r0
     ff4:	1f 90       	pop	r1
     ff6:	18 95       	reti

00000ff8 <__vector_3>:


void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
     ff8:	1f 92       	push	r1
     ffa:	0f 92       	push	r0
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	0f 92       	push	r0
    1000:	11 24       	eor	r1, r1
    1002:	2f 93       	push	r18
    1004:	3f 93       	push	r19
    1006:	4f 93       	push	r20
    1008:	5f 93       	push	r21
    100a:	6f 93       	push	r22
    100c:	7f 93       	push	r23
    100e:	8f 93       	push	r24
    1010:	9f 93       	push	r25
    1012:	af 93       	push	r26
    1014:	bf 93       	push	r27
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
	if(ISR_VidPtrCallBackFunc[INTERRUPT_ID] !=NULL)
    1022:	80 91 8a 00 	lds	r24, 0x008A
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	fc 01       	movw	r30, r24
    1030:	ee 59       	subi	r30, 0x9E	; 158
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	69 f0       	breq	.+26     	; 0x1056 <__vector_3+0x5e>
	{
		ISR_VidPtrCallBackFunc[INTERRUPT_ID]();
    103c:	80 91 8a 00 	lds	r24, 0x008A
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	fc 01       	movw	r30, r24
    104a:	ee 59       	subi	r30, 0x9E	; 158
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	01 90       	ld	r0, Z+
    1050:	f0 81       	ld	r31, Z
    1052:	e0 2d       	mov	r30, r0
    1054:	09 95       	icall
	}
}
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <__vector_4>:


void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	11 24       	eor	r1, r1
    1086:	2f 93       	push	r18
    1088:	3f 93       	push	r19
    108a:	4f 93       	push	r20
    108c:	5f 93       	push	r21
    108e:	6f 93       	push	r22
    1090:	7f 93       	push	r23
    1092:	8f 93       	push	r24
    1094:	9f 93       	push	r25
    1096:	af 93       	push	r26
    1098:	bf 93       	push	r27
    109a:	ef 93       	push	r30
    109c:	ff 93       	push	r31
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	if(ISR_VidPtrCallBackFunc[INTERRUPT_ID] !=NULL)
    10a6:	80 91 8a 00 	lds	r24, 0x008A
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	fc 01       	movw	r30, r24
    10b4:	ee 59       	subi	r30, 0x9E	; 158
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	69 f0       	breq	.+26     	; 0x10da <__vector_4+0x5e>
	{
		ISR_VidPtrCallBackFunc[INTERRUPT_ID]();
    10c0:	80 91 8a 00 	lds	r24, 0x008A
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	fc 01       	movw	r30, r24
    10ce:	ee 59       	subi	r30, 0x9E	; 158
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	01 90       	ld	r0, Z+
    10d4:	f0 81       	ld	r31, Z
    10d6:	e0 2d       	mov	r30, r0
    10d8:	09 95       	icall
	}
}
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	ff 91       	pop	r31
    10e0:	ef 91       	pop	r30
    10e2:	bf 91       	pop	r27
    10e4:	af 91       	pop	r26
    10e6:	9f 91       	pop	r25
    10e8:	8f 91       	pop	r24
    10ea:	7f 91       	pop	r23
    10ec:	6f 91       	pop	r22
    10ee:	5f 91       	pop	r21
    10f0:	4f 91       	pop	r20
    10f2:	3f 91       	pop	r19
    10f4:	2f 91       	pop	r18
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0f 90       	pop	r0
    10fc:	1f 90       	pop	r1
    10fe:	18 95       	reti

00001100 <__vector_5>:


void __vector_5 (void) __attribute__((signal));
void __vector_5 (void)
{
    1100:	1f 92       	push	r1
    1102:	0f 92       	push	r0
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	0f 92       	push	r0
    1108:	11 24       	eor	r1, r1
    110a:	2f 93       	push	r18
    110c:	3f 93       	push	r19
    110e:	4f 93       	push	r20
    1110:	5f 93       	push	r21
    1112:	6f 93       	push	r22
    1114:	7f 93       	push	r23
    1116:	8f 93       	push	r24
    1118:	9f 93       	push	r25
    111a:	af 93       	push	r26
    111c:	bf 93       	push	r27
    111e:	ef 93       	push	r30
    1120:	ff 93       	push	r31
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	if(ISR_VidPtrCallBackFunc[INTERRUPT_ID] !=NULL)
    112a:	80 91 8a 00 	lds	r24, 0x008A
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	fc 01       	movw	r30, r24
    1138:	ee 59       	subi	r30, 0x9E	; 158
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	80 81       	ld	r24, Z
    113e:	91 81       	ldd	r25, Z+1	; 0x01
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	69 f0       	breq	.+26     	; 0x115e <__vector_5+0x5e>
	{
		ISR_VidPtrCallBackFunc[INTERRUPT_ID]();
    1144:	80 91 8a 00 	lds	r24, 0x008A
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	fc 01       	movw	r30, r24
    1152:	ee 59       	subi	r30, 0x9E	; 158
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	01 90       	ld	r0, Z+
    1158:	f0 81       	ld	r31, Z
    115a:	e0 2d       	mov	r30, r0
    115c:	09 95       	icall
	}
}
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	ff 91       	pop	r31
    1164:	ef 91       	pop	r30
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	7f 91       	pop	r23
    1170:	6f 91       	pop	r22
    1172:	5f 91       	pop	r21
    1174:	4f 91       	pop	r20
    1176:	3f 91       	pop	r19
    1178:	2f 91       	pop	r18
    117a:	0f 90       	pop	r0
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	0f 90       	pop	r0
    1180:	1f 90       	pop	r1
    1182:	18 95       	reti

00001184 <__vector_6>:


void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    1184:	1f 92       	push	r1
    1186:	0f 92       	push	r0
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	0f 92       	push	r0
    118c:	11 24       	eor	r1, r1
    118e:	2f 93       	push	r18
    1190:	3f 93       	push	r19
    1192:	4f 93       	push	r20
    1194:	5f 93       	push	r21
    1196:	6f 93       	push	r22
    1198:	7f 93       	push	r23
    119a:	8f 93       	push	r24
    119c:	9f 93       	push	r25
    119e:	af 93       	push	r26
    11a0:	bf 93       	push	r27
    11a2:	ef 93       	push	r30
    11a4:	ff 93       	push	r31
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	if(ISR_VidPtrCallBackFunc[INTERRUPT_ID] !=NULL)
    11ae:	80 91 8a 00 	lds	r24, 0x008A
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	fc 01       	movw	r30, r24
    11bc:	ee 59       	subi	r30, 0x9E	; 158
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	69 f0       	breq	.+26     	; 0x11e2 <__vector_6+0x5e>
	{
		ISR_VidPtrCallBackFunc[INTERRUPT_ID]();
    11c8:	80 91 8a 00 	lds	r24, 0x008A
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	fc 01       	movw	r30, r24
    11d6:	ee 59       	subi	r30, 0x9E	; 158
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	01 90       	ld	r0, Z+
    11dc:	f0 81       	ld	r31, Z
    11de:	e0 2d       	mov	r30, r0
    11e0:	09 95       	icall
	}
}
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	ff 91       	pop	r31
    11e8:	ef 91       	pop	r30
    11ea:	bf 91       	pop	r27
    11ec:	af 91       	pop	r26
    11ee:	9f 91       	pop	r25
    11f0:	8f 91       	pop	r24
    11f2:	7f 91       	pop	r23
    11f4:	6f 91       	pop	r22
    11f6:	5f 91       	pop	r21
    11f8:	4f 91       	pop	r20
    11fa:	3f 91       	pop	r19
    11fc:	2f 91       	pop	r18
    11fe:	0f 90       	pop	r0
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	0f 90       	pop	r0
    1204:	1f 90       	pop	r1
    1206:	18 95       	reti

00001208 <__vector_7>:


void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
    1208:	1f 92       	push	r1
    120a:	0f 92       	push	r0
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	0f 92       	push	r0
    1210:	11 24       	eor	r1, r1
    1212:	2f 93       	push	r18
    1214:	3f 93       	push	r19
    1216:	4f 93       	push	r20
    1218:	5f 93       	push	r21
    121a:	6f 93       	push	r22
    121c:	7f 93       	push	r23
    121e:	8f 93       	push	r24
    1220:	9f 93       	push	r25
    1222:	af 93       	push	r26
    1224:	bf 93       	push	r27
    1226:	ef 93       	push	r30
    1228:	ff 93       	push	r31
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
	if(ISR_VidPtrCallBackFunc[INTERRUPT_ID] !=NULL)
    1232:	80 91 8a 00 	lds	r24, 0x008A
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	fc 01       	movw	r30, r24
    1240:	ee 59       	subi	r30, 0x9E	; 158
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	69 f0       	breq	.+26     	; 0x1266 <__vector_7+0x5e>
	{
		ISR_VidPtrCallBackFunc[INTERRUPT_ID]();
    124c:	80 91 8a 00 	lds	r24, 0x008A
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	fc 01       	movw	r30, r24
    125a:	ee 59       	subi	r30, 0x9E	; 158
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	01 90       	ld	r0, Z+
    1260:	f0 81       	ld	r31, Z
    1262:	e0 2d       	mov	r30, r0
    1264:	09 95       	icall
	}
}
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	bf 91       	pop	r27
    1270:	af 91       	pop	r26
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	7f 91       	pop	r23
    1278:	6f 91       	pop	r22
    127a:	5f 91       	pop	r21
    127c:	4f 91       	pop	r20
    127e:	3f 91       	pop	r19
    1280:	2f 91       	pop	r18
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <__vector_8>:


void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
    128c:	1f 92       	push	r1
    128e:	0f 92       	push	r0
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	0f 92       	push	r0
    1294:	11 24       	eor	r1, r1
    1296:	2f 93       	push	r18
    1298:	3f 93       	push	r19
    129a:	4f 93       	push	r20
    129c:	5f 93       	push	r21
    129e:	6f 93       	push	r22
    12a0:	7f 93       	push	r23
    12a2:	8f 93       	push	r24
    12a4:	9f 93       	push	r25
    12a6:	af 93       	push	r26
    12a8:	bf 93       	push	r27
    12aa:	ef 93       	push	r30
    12ac:	ff 93       	push	r31
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
	if(ISR_VidPtrCallBackFunc[INTERRUPT_ID] !=NULL)
    12b6:	80 91 8a 00 	lds	r24, 0x008A
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	fc 01       	movw	r30, r24
    12c4:	ee 59       	subi	r30, 0x9E	; 158
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	69 f0       	breq	.+26     	; 0x12ea <__vector_8+0x5e>
	{
		ISR_VidPtrCallBackFunc[INTERRUPT_ID]();
    12d0:	80 91 8a 00 	lds	r24, 0x008A
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	fc 01       	movw	r30, r24
    12de:	ee 59       	subi	r30, 0x9E	; 158
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	01 90       	ld	r0, Z+
    12e4:	f0 81       	ld	r31, Z
    12e6:	e0 2d       	mov	r30, r0
    12e8:	09 95       	icall
	}
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <__vector_9>:


void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	5f 93       	push	r21
    1322:	6f 93       	push	r22
    1324:	7f 93       	push	r23
    1326:	8f 93       	push	r24
    1328:	9f 93       	push	r25
    132a:	af 93       	push	r26
    132c:	bf 93       	push	r27
    132e:	ef 93       	push	r30
    1330:	ff 93       	push	r31
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
	if(ISR_VidPtrCallBackFunc[INTERRUPT_ID] !=NULL)
    133a:	80 91 8a 00 	lds	r24, 0x008A
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	fc 01       	movw	r30, r24
    1348:	ee 59       	subi	r30, 0x9E	; 158
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	69 f0       	breq	.+26     	; 0x136e <__vector_9+0x5e>
	{
		ISR_VidPtrCallBackFunc[INTERRUPT_ID]();
    1354:	80 91 8a 00 	lds	r24, 0x008A
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	fc 01       	movw	r30, r24
    1362:	ee 59       	subi	r30, 0x9E	; 158
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	01 90       	ld	r0, Z+
    1368:	f0 81       	ld	r31, Z
    136a:	e0 2d       	mov	r30, r0
    136c:	09 95       	icall
	}
}
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	ff 91       	pop	r31
    1374:	ef 91       	pop	r30
    1376:	bf 91       	pop	r27
    1378:	af 91       	pop	r26
    137a:	9f 91       	pop	r25
    137c:	8f 91       	pop	r24
    137e:	7f 91       	pop	r23
    1380:	6f 91       	pop	r22
    1382:	5f 91       	pop	r21
    1384:	4f 91       	pop	r20
    1386:	3f 91       	pop	r19
    1388:	2f 91       	pop	r18
    138a:	0f 90       	pop	r0
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	0f 90       	pop	r0
    1390:	1f 90       	pop	r1
    1392:	18 95       	reti

00001394 <__vector_10>:


void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
    139e:	2f 93       	push	r18
    13a0:	3f 93       	push	r19
    13a2:	4f 93       	push	r20
    13a4:	5f 93       	push	r21
    13a6:	6f 93       	push	r22
    13a8:	7f 93       	push	r23
    13aa:	8f 93       	push	r24
    13ac:	9f 93       	push	r25
    13ae:	af 93       	push	r26
    13b0:	bf 93       	push	r27
    13b2:	ef 93       	push	r30
    13b4:	ff 93       	push	r31
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
	if(ISR_VidPtrCallBackFunc[INTERRUPT_ID] !=NULL)
    13be:	80 91 8a 00 	lds	r24, 0x008A
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	fc 01       	movw	r30, r24
    13cc:	ee 59       	subi	r30, 0x9E	; 158
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	80 81       	ld	r24, Z
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	69 f0       	breq	.+26     	; 0x13f2 <__vector_10+0x5e>
	{
		ISR_VidPtrCallBackFunc[INTERRUPT_ID]();
    13d8:	80 91 8a 00 	lds	r24, 0x008A
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	fc 01       	movw	r30, r24
    13e6:	ee 59       	subi	r30, 0x9E	; 158
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	01 90       	ld	r0, Z+
    13ec:	f0 81       	ld	r31, Z
    13ee:	e0 2d       	mov	r30, r0
    13f0:	09 95       	icall
	}
}
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	ff 91       	pop	r31
    13f8:	ef 91       	pop	r30
    13fa:	bf 91       	pop	r27
    13fc:	af 91       	pop	r26
    13fe:	9f 91       	pop	r25
    1400:	8f 91       	pop	r24
    1402:	7f 91       	pop	r23
    1404:	6f 91       	pop	r22
    1406:	5f 91       	pop	r21
    1408:	4f 91       	pop	r20
    140a:	3f 91       	pop	r19
    140c:	2f 91       	pop	r18
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <__vector_11>:


void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    1418:	1f 92       	push	r1
    141a:	0f 92       	push	r0
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	0f 92       	push	r0
    1420:	11 24       	eor	r1, r1
    1422:	2f 93       	push	r18
    1424:	3f 93       	push	r19
    1426:	4f 93       	push	r20
    1428:	5f 93       	push	r21
    142a:	6f 93       	push	r22
    142c:	7f 93       	push	r23
    142e:	8f 93       	push	r24
    1430:	9f 93       	push	r25
    1432:	af 93       	push	r26
    1434:	bf 93       	push	r27
    1436:	ef 93       	push	r30
    1438:	ff 93       	push	r31
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
	if(ISR_VidPtrCallBackFunc[INTERRUPT_ID] !=NULL)
    1442:	80 91 8a 00 	lds	r24, 0x008A
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	fc 01       	movw	r30, r24
    1450:	ee 59       	subi	r30, 0x9E	; 158
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	69 f0       	breq	.+26     	; 0x1476 <__vector_11+0x5e>
	{
		ISR_VidPtrCallBackFunc[INTERRUPT_ID]();
    145c:	80 91 8a 00 	lds	r24, 0x008A
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	fc 01       	movw	r30, r24
    146a:	ee 59       	subi	r30, 0x9E	; 158
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	01 90       	ld	r0, Z+
    1470:	f0 81       	ld	r31, Z
    1472:	e0 2d       	mov	r30, r0
    1474:	09 95       	icall
	}
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	0f 90       	pop	r0
    1498:	1f 90       	pop	r1
    149a:	18 95       	reti

0000149c <GIE_VidEnable>:
# include "D:\AVR_WS\COTS\Lib\BIT_MATH.h"
#include "GIE_register.h"
#include "GIE_interface.h"

void GIE_VidEnable()
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
	//Enable interrupt Control GIE
	SET_BIT(S_REG , GIE);
    14a4:	af e5       	ldi	r26, 0x5F	; 95
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	ef e5       	ldi	r30, 0x5F	; 95
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	80 68       	ori	r24, 0x80	; 128
    14b0:	8c 93       	st	X, r24
}
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <GIE_VidDisable>:

void GIE_VidDisable()
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
	//Disable interrupt Control GIE
	CLR_BIT(S_REG , GIE);
    14c0:	af e5       	ldi	r26, 0x5F	; 95
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	ef e5       	ldi	r30, 0x5F	; 95
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	8f 77       	andi	r24, 0x7F	; 127
    14cc:	8c 93       	st	X, r24
}
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <EXI0_VidINT0Init>:
void (*EXI_VidPtrINT2Func)(void) = NULL;

/*Pre-build configuration*/
//Initialization function of External Interrupt 0
void EXI0_VidINT0Init(void)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
	#elif INT0_SENSE == Any_Logical_Change
	      SET_BIT(MCUCR , ISC00);
	      CLR_BIT(MCUCR , ISC01);

    #elif INT0_SENSE == Falling_Edge
	      CLR_BIT(MCUCR , ISC00);
    14dc:	a5 e5       	ldi	r26, 0x55	; 85
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e5 e5       	ldi	r30, 0x55	; 85
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8e 7f       	andi	r24, 0xFE	; 254
    14e8:	8c 93       	st	X, r24
	      SET_BIT(MCUCR , ISC01);
    14ea:	a5 e5       	ldi	r26, 0x55	; 85
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e5       	ldi	r30, 0x55	; 85
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	82 60       	ori	r24, 0x02	; 2
    14f6:	8c 93       	st	X, r24
    #error "Wrong INT0_SENSE Configuration option"
    #endif

    /* Check Peripheral interrupt enable initial state*/
    #if INT0_INITIAL_STATE == ENABLED
	    SET_BIT(GICR , GICR_INT0);
    14f8:	ab e5       	ldi	r26, 0x5B	; 91
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	eb e5       	ldi	r30, 0x5B	; 91
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	80 64       	ori	r24, 0x40	; 64
    1504:	8c 93       	st	X, r24
    #else
    #error "Wrong INT0_INITIAL_STATE Configuration option"
    #endif

	//Configure interrupt 0 Port PD2 as Input
	DIO_VidSetPinDirection(PORT_D , PIN_2 , INPUT);
    1506:	84 e0       	ldi	r24, 0x04	; 4
    1508:	62 e0       	ldi	r22, 0x02	; 2
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_VidSetPinDirection>
	//Configure PullUP Resistor
	DIO_VidSetPinValue(PORT_D , PIN_2 , HIGH);
    1510:	84 e0       	ldi	r24, 0x04	; 4
    1512:	62 e0       	ldi	r22, 0x02	; 2
    1514:	41 e0       	ldi	r20, 0x01	; 1
    1516:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <DIO_VidSetPinValue>
}
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <EXI1_VidINT1Init>:

//Initialization function of External Interrupt 1
void EXI1_VidINT1Init(void)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
	#elif INT1_SENSE == Any_Logical_Change
	      SET_BIT(MCUCR , ISC10);
	      CLR_BIT(MCUCR , ISC11);

    #elif INT1_SENSE == Falling_Edge
	      CLR_BIT(MCUCR , ISC10);
    1528:	a5 e5       	ldi	r26, 0x55	; 85
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e5 e5       	ldi	r30, 0x55	; 85
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8b 7f       	andi	r24, 0xFB	; 251
    1534:	8c 93       	st	X, r24
	      SET_BIT(MCUCR , ISC11);
    1536:	a5 e5       	ldi	r26, 0x55	; 85
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e5 e5       	ldi	r30, 0x55	; 85
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	88 60       	ori	r24, 0x08	; 8
    1542:	8c 93       	st	X, r24
    #error "Wrong INT1_SENSE Configuration option"
    #endif

    /* Check Peripheral interrupt enable initial state*/
    #if INT1_INITIAL_STATE == ENABLED
	    SET_BIT(GICR , GICR_INT1);
    1544:	ab e5       	ldi	r26, 0x5B	; 91
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	eb e5       	ldi	r30, 0x5B	; 91
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 68       	ori	r24, 0x80	; 128
    1550:	8c 93       	st	X, r24
    #else
    #error "Wrong INT1_INITIAL_STATE Configuration option"
    #endif

	//Configure interrupt 1 Port PD3 as Input
	DIO_VidSetPinDirection(PORT_D , PIN_3 , INPUT);
    1552:	84 e0       	ldi	r24, 0x04	; 4
    1554:	63 e0       	ldi	r22, 0x03	; 3
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_VidSetPinDirection>
    //Configure PullUP Resistor
	DIO_VidSetPinValue(PORT_D , PIN_3 , HIGH);
    155c:	84 e0       	ldi	r24, 0x04	; 4
    155e:	63 e0       	ldi	r22, 0x03	; 3
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <DIO_VidSetPinValue>
}
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <EXI2_VidINT2Init>:

//Initialization function of External Interrupt 2
void EXI2_VidINT2Init(void)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
   /*1- Check Sense Control*/
    #if INT2_SENSE == Falling_Edge
	      CLR_BIT(MCUCR , ISC2);
    1574:	a5 e5       	ldi	r26, 0x55	; 85
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e5       	ldi	r30, 0x55	; 85
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8f 7b       	andi	r24, 0xBF	; 191
    1580:	8c 93       	st	X, r24
    #error "Wrong INT2_SENSE Configuration option"
    #endif

    /* Check Peripheral interrupt enable initial state*/
    #if INT2_INITIAL_STATE == ENABLED
	    SET_BIT(GICR , GICR_INT2);
    1582:	ab e5       	ldi	r26, 0x5B	; 91
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	eb e5       	ldi	r30, 0x5B	; 91
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	80 62       	ori	r24, 0x20	; 32
    158e:	8c 93       	st	X, r24
    #else
    #error "Wrong INT2_INITIAL_STATE Configuration option"
    #endif

	//Configure interrupt 2 Port PB2 as Input
	DIO_VidSetPinDirection(PORT_B , PIN_2 , INPUT);
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	62 e0       	ldi	r22, 0x02	; 2
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_VidSetPinDirection>
    //Configure PullUP Resistor
	DIO_VidSetPinValue(PORT_B , PIN_2 , HIGH);
    159a:	82 e0       	ldi	r24, 0x02	; 2
    159c:	62 e0       	ldi	r22, 0x02	; 2
    159e:	41 e0       	ldi	r20, 0x01	; 1
    15a0:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <DIO_VidSetPinValue>
 }
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <EXI0_VidInit>:
 * Input: Copy_u8INT0SenseControl , Options are: 1- Low_Level
                                                 2- Any_Logical_Change
                                                 3- Falling_Edge
                                                 4- Rising_Edge  */
void EXI0_VidInit(u8 Copy_u8INT0SenseControl)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <EXI0_VidInit+0x6>
    15b0:	0f 92       	push	r0
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	89 83       	std	Y+1, r24	; 0x01
	//Enable sensing Bits
	switch(Copy_u8INT0SenseControl)
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	3b 83       	std	Y+3, r19	; 0x03
    15c0:	2a 83       	std	Y+2, r18	; 0x02
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	9b 81       	ldd	r25, Y+3	; 0x03
    15c6:	82 30       	cpi	r24, 0x02	; 2
    15c8:	91 05       	cpc	r25, r1
    15ca:	29 f1       	breq	.+74     	; 0x1616 <EXI0_VidInit+0x6c>
    15cc:	2a 81       	ldd	r18, Y+2	; 0x02
    15ce:	3b 81       	ldd	r19, Y+3	; 0x03
    15d0:	23 30       	cpi	r18, 0x03	; 3
    15d2:	31 05       	cpc	r19, r1
    15d4:	34 f4       	brge	.+12     	; 0x15e2 <EXI0_VidInit+0x38>
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	9b 81       	ldd	r25, Y+3	; 0x03
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	61 f0       	breq	.+24     	; 0x15f8 <EXI0_VidInit+0x4e>
    15e0:	46 c0       	rjmp	.+140    	; 0x166e <EXI0_VidInit+0xc4>
    15e2:	2a 81       	ldd	r18, Y+2	; 0x02
    15e4:	3b 81       	ldd	r19, Y+3	; 0x03
    15e6:	23 30       	cpi	r18, 0x03	; 3
    15e8:	31 05       	cpc	r19, r1
    15ea:	21 f1       	breq	.+72     	; 0x1634 <EXI0_VidInit+0x8a>
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	9b 81       	ldd	r25, Y+3	; 0x03
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	91 05       	cpc	r25, r1
    15f4:	71 f1       	breq	.+92     	; 0x1652 <EXI0_VidInit+0xa8>
    15f6:	3b c0       	rjmp	.+118    	; 0x166e <EXI0_VidInit+0xc4>
	{
     case (Low_Level) : CLR_BIT(MCUCR , ISC00); CLR_BIT(MCUCR , ISC01);break;
    15f8:	a5 e5       	ldi	r26, 0x55	; 85
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e5 e5       	ldi	r30, 0x55	; 85
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8e 7f       	andi	r24, 0xFE	; 254
    1604:	8c 93       	st	X, r24
    1606:	a5 e5       	ldi	r26, 0x55	; 85
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e5 e5       	ldi	r30, 0x55	; 85
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	8d 7f       	andi	r24, 0xFD	; 253
    1612:	8c 93       	st	X, r24
    1614:	2c c0       	rjmp	.+88     	; 0x166e <EXI0_VidInit+0xc4>
     case (Any_Logical_Change) : CLR_BIT(MCUCR , ISC01); SET_BIT(MCUCR , ISC00);break;
    1616:	a5 e5       	ldi	r26, 0x55	; 85
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e5 e5       	ldi	r30, 0x55	; 85
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8d 7f       	andi	r24, 0xFD	; 253
    1622:	8c 93       	st	X, r24
    1624:	a5 e5       	ldi	r26, 0x55	; 85
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e5       	ldi	r30, 0x55	; 85
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	81 60       	ori	r24, 0x01	; 1
    1630:	8c 93       	st	X, r24
    1632:	1d c0       	rjmp	.+58     	; 0x166e <EXI0_VidInit+0xc4>
	 case (Falling_Edge) : CLR_BIT(MCUCR , ISC00); SET_BIT(MCUCR , ISC01);break;
    1634:	a5 e5       	ldi	r26, 0x55	; 85
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e5 e5       	ldi	r30, 0x55	; 85
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	8e 7f       	andi	r24, 0xFE	; 254
    1640:	8c 93       	st	X, r24
    1642:	a5 e5       	ldi	r26, 0x55	; 85
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e5 e5       	ldi	r30, 0x55	; 85
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	82 60       	ori	r24, 0x02	; 2
    164e:	8c 93       	st	X, r24
    1650:	0e c0       	rjmp	.+28     	; 0x166e <EXI0_VidInit+0xc4>
	 case (Rising_Edge) : SET_BIT(MCUCR , ISC00); SET_BIT(MCUCR , ISC01);break;
    1652:	a5 e5       	ldi	r26, 0x55	; 85
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e5 e5       	ldi	r30, 0x55	; 85
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	81 60       	ori	r24, 0x01	; 1
    165e:	8c 93       	st	X, r24
    1660:	a5 e5       	ldi	r26, 0x55	; 85
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e5 e5       	ldi	r30, 0x55	; 85
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	82 60       	ori	r24, 0x02	; 2
    166c:	8c 93       	st	X, r24
	}

   //Configure interrupt 0 Port PD2 as Input
   DIO_VidSetPinDirection(PORT_D , PIN_2 , INPUT);
    166e:	84 e0       	ldi	r24, 0x04	; 4
    1670:	62 e0       	ldi	r22, 0x02	; 2
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_VidSetPinDirection>
   //Configure PullUP Resistor
   DIO_VidSetPinValue(PORT_D , PIN_2 , HIGH);
    1678:	84 e0       	ldi	r24, 0x04	; 4
    167a:	62 e0       	ldi	r22, 0x02	; 2
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <DIO_VidSetPinValue>
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <EXI1_VidInit>:
 * Input: Copy_u8INT1SenseControl , Options are: 1- Low_Level
                                                 2- Any_Logical_Change
                                                 3- Falling_Edge
                                                 4- Rising_Edge  */
void EXI1_VidInit(u8 Copy_u8INT1SenseControl)
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	00 d0       	rcall	.+0      	; 0x1694 <EXI1_VidInit+0x6>
    1694:	0f 92       	push	r0
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	89 83       	std	Y+1, r24	; 0x01
	//Enable sensing Bits
	switch(Copy_u8INT1SenseControl)
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	3b 83       	std	Y+3, r19	; 0x03
    16a4:	2a 83       	std	Y+2, r18	; 0x02
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	9b 81       	ldd	r25, Y+3	; 0x03
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	91 05       	cpc	r25, r1
    16ae:	29 f1       	breq	.+74     	; 0x16fa <EXI1_VidInit+0x6c>
    16b0:	2a 81       	ldd	r18, Y+2	; 0x02
    16b2:	3b 81       	ldd	r19, Y+3	; 0x03
    16b4:	23 30       	cpi	r18, 0x03	; 3
    16b6:	31 05       	cpc	r19, r1
    16b8:	34 f4       	brge	.+12     	; 0x16c6 <EXI1_VidInit+0x38>
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	91 05       	cpc	r25, r1
    16c2:	61 f0       	breq	.+24     	; 0x16dc <EXI1_VidInit+0x4e>
    16c4:	46 c0       	rjmp	.+140    	; 0x1752 <EXI1_VidInit+0xc4>
    16c6:	2a 81       	ldd	r18, Y+2	; 0x02
    16c8:	3b 81       	ldd	r19, Y+3	; 0x03
    16ca:	23 30       	cpi	r18, 0x03	; 3
    16cc:	31 05       	cpc	r19, r1
    16ce:	21 f1       	breq	.+72     	; 0x1718 <EXI1_VidInit+0x8a>
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	9b 81       	ldd	r25, Y+3	; 0x03
    16d4:	84 30       	cpi	r24, 0x04	; 4
    16d6:	91 05       	cpc	r25, r1
    16d8:	71 f1       	breq	.+92     	; 0x1736 <EXI1_VidInit+0xa8>
    16da:	3b c0       	rjmp	.+118    	; 0x1752 <EXI1_VidInit+0xc4>
	{
	 case (Low_Level) : CLR_BIT(MCUCR , ISC11); CLR_BIT(MCUCR , ISC10);break;
    16dc:	a5 e5       	ldi	r26, 0x55	; 85
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e5 e5       	ldi	r30, 0x55	; 85
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	87 7f       	andi	r24, 0xF7	; 247
    16e8:	8c 93       	st	X, r24
    16ea:	a5 e5       	ldi	r26, 0x55	; 85
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e5 e5       	ldi	r30, 0x55	; 85
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8b 7f       	andi	r24, 0xFB	; 251
    16f6:	8c 93       	st	X, r24
    16f8:	2c c0       	rjmp	.+88     	; 0x1752 <EXI1_VidInit+0xc4>
	 case (Any_Logical_Change) : CLR_BIT(MCUCR , ISC11); SET_BIT(MCUCR , ISC10);break;
    16fa:	a5 e5       	ldi	r26, 0x55	; 85
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e5 e5       	ldi	r30, 0x55	; 85
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	87 7f       	andi	r24, 0xF7	; 247
    1706:	8c 93       	st	X, r24
    1708:	a5 e5       	ldi	r26, 0x55	; 85
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e5 e5       	ldi	r30, 0x55	; 85
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	84 60       	ori	r24, 0x04	; 4
    1714:	8c 93       	st	X, r24
    1716:	1d c0       	rjmp	.+58     	; 0x1752 <EXI1_VidInit+0xc4>
	 case (Falling_Edge) : CLR_BIT(MCUCR , ISC10); SET_BIT(MCUCR , ISC11);break;
    1718:	a5 e5       	ldi	r26, 0x55	; 85
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e5 e5       	ldi	r30, 0x55	; 85
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8b 7f       	andi	r24, 0xFB	; 251
    1724:	8c 93       	st	X, r24
    1726:	a5 e5       	ldi	r26, 0x55	; 85
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e5 e5       	ldi	r30, 0x55	; 85
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	88 60       	ori	r24, 0x08	; 8
    1732:	8c 93       	st	X, r24
    1734:	0e c0       	rjmp	.+28     	; 0x1752 <EXI1_VidInit+0xc4>
     case (Rising_Edge) : SET_BIT(MCUCR , ISC11); SET_BIT(MCUCR , ISC10);break;
    1736:	a5 e5       	ldi	r26, 0x55	; 85
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e5 e5       	ldi	r30, 0x55	; 85
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	88 60       	ori	r24, 0x08	; 8
    1742:	8c 93       	st	X, r24
    1744:	a5 e5       	ldi	r26, 0x55	; 85
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e5 e5       	ldi	r30, 0x55	; 85
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	84 60       	ori	r24, 0x04	; 4
    1750:	8c 93       	st	X, r24
	}

	//Configure interrupt 1 Port PD3 as Input
	DIO_VidSetPinDirection(PORT_D , PIN_3 , INPUT);
    1752:	84 e0       	ldi	r24, 0x04	; 4
    1754:	63 e0       	ldi	r22, 0x03	; 3
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_VidSetPinDirection>
	//Configure PullUP Resistor
	DIO_VidSetPinValue(PORT_D , PIN_3 , HIGH);
    175c:	84 e0       	ldi	r24, 0x04	; 4
    175e:	63 e0       	ldi	r22, 0x03	; 3
    1760:	41 e0       	ldi	r20, 0x01	; 1
    1762:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <DIO_VidSetPinValue>
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <EXI2_VidInit>:
/* Description: A function to set the required sense control of INT2 using postbuild configuration
 * Input: Copy_u8INT2SenseControl , Options are:
                                                 1- Falling_Edge
                                                 2- Rising_Edge  */
void EXI2_VidInit(u8 Copy_u8INT2SenseControl)
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	00 d0       	rcall	.+0      	; 0x1778 <EXI2_VidInit+0x6>
    1778:	0f 92       	push	r0
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	89 83       	std	Y+1, r24	; 0x01
	//Enable sensing Bit for rising edge
	switch(Copy_u8INT2SenseControl)
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3b 83       	std	Y+3, r19	; 0x03
    1788:	2a 83       	std	Y+2, r18	; 0x02
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	9b 81       	ldd	r25, Y+3	; 0x03
    178e:	83 30       	cpi	r24, 0x03	; 3
    1790:	91 05       	cpc	r25, r1
    1792:	31 f0       	breq	.+12     	; 0x17a0 <EXI2_VidInit+0x2e>
    1794:	2a 81       	ldd	r18, Y+2	; 0x02
    1796:	3b 81       	ldd	r19, Y+3	; 0x03
    1798:	24 30       	cpi	r18, 0x04	; 4
    179a:	31 05       	cpc	r19, r1
    179c:	49 f0       	breq	.+18     	; 0x17b0 <EXI2_VidInit+0x3e>
    179e:	0f c0       	rjmp	.+30     	; 0x17be <EXI2_VidInit+0x4c>
	{
	 case (Falling_Edge): CLR_BIT(MCUCSR , ISC2);break;
    17a0:	a4 e5       	ldi	r26, 0x54	; 84
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e4 e5       	ldi	r30, 0x54	; 84
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	8f 7b       	andi	r24, 0xBF	; 191
    17ac:	8c 93       	st	X, r24
    17ae:	07 c0       	rjmp	.+14     	; 0x17be <EXI2_VidInit+0x4c>
	 case (Rising_Edge) : SET_BIT(MCUCSR , ISC2);break;
    17b0:	a4 e5       	ldi	r26, 0x54	; 84
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e4 e5       	ldi	r30, 0x54	; 84
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	80 64       	ori	r24, 0x40	; 64
    17bc:	8c 93       	st	X, r24
	}
	//Configure interrupt 2 Port PB2 as Input
	DIO_VidSetPinDirection(PORT_B , PIN_2 , INPUT);
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	62 e0       	ldi	r22, 0x02	; 2
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_VidSetPinDirection>
	//Configure PullUP Resistor
	DIO_VidSetPinValue(PORT_B , PIN_2 , HIGH);
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	62 e0       	ldi	r22, 0x02	; 2
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <DIO_VidSetPinValue>
 }
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <EXI0_VidEnable>:



void EXI0_VidEnable()
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
	//Enable interrupt 0
	SET_BIT(GICR , GICR_INT0);
    17e6:	ab e5       	ldi	r26, 0x5B	; 91
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	eb e5       	ldi	r30, 0x5B	; 91
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	80 64       	ori	r24, 0x40	; 64
    17f2:	8c 93       	st	X, r24
}
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <EXI1_VidEnable>:

void EXI1_VidEnable()
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
	//Enable interrupt 1
    SET_BIT(GICR , GICR_INT1);
    1802:	ab e5       	ldi	r26, 0x5B	; 91
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	eb e5       	ldi	r30, 0x5B	; 91
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	80 68       	ori	r24, 0x80	; 128
    180e:	8c 93       	st	X, r24
}
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <EXI2_VidEnable>:

void EXI2_VidEnable()
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
	//Enable interrupt 2
	SET_BIT(GICR , GICR_INT2);
    181e:	ab e5       	ldi	r26, 0x5B	; 91
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	eb e5       	ldi	r30, 0x5B	; 91
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	80 62       	ori	r24, 0x20	; 32
    182a:	8c 93       	st	X, r24
}
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <EXI0_VidDisable>:

void EXI0_VidDisable()
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
	//Disable interrupt 0
	CLR_BIT(GICR , GICR_INT0);
    183a:	ab e5       	ldi	r26, 0x5B	; 91
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	eb e5       	ldi	r30, 0x5B	; 91
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	8f 7b       	andi	r24, 0xBF	; 191
    1846:	8c 93       	st	X, r24
}
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <EXI1_VidDisable>:

void EXI1_VidDisable()
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
	//Disable interrupt 1
	CLR_BIT(GICR , GICR_INT1);
    1856:	ab e5       	ldi	r26, 0x5B	; 91
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	eb e5       	ldi	r30, 0x5B	; 91
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8f 77       	andi	r24, 0x7F	; 127
    1862:	8c 93       	st	X, r24
}
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <EXI2_VidDisable>:

void EXI2_VidDisable()
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
	//Disable interrupt 2
	CLR_BIT(GICR , GICR_INT2);
    1872:	ab e5       	ldi	r26, 0x5B	; 91
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	eb e5       	ldi	r30, 0x5B	; 91
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8f 7d       	andi	r24, 0xDF	; 223
    187e:	8c 93       	st	X, r24
}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <DIO_VidSetPortDirection>:
# include "D:\AVR_WS\COTS\Lib\BIT_MATH.h"
# include "DIO_register.h"
# include "DIO_interface.h"

void DIO_VidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <DIO_VidSetPortDirection+0x6>
    188c:	00 d0       	rcall	.+0      	; 0x188e <DIO_VidSetPortDirection+0x8>
    188e:	00 d0       	rcall	.+0      	; 0x1890 <DIO_VidSetPortDirection+0xa>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Direction == OUTPUT)
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	a1 f5       	brne	.+104    	; 0x1906 <DIO_VidSetPortDirection+0x80>
		{
			switch (Copy_u8Port)
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	3e 83       	std	Y+6, r19	; 0x06
    18a6:	2d 83       	std	Y+5, r18	; 0x05
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	82 30       	cpi	r24, 0x02	; 2
    18ae:	91 05       	cpc	r25, r1
    18b0:	d9 f0       	breq	.+54     	; 0x18e8 <DIO_VidSetPortDirection+0x62>
    18b2:	2d 81       	ldd	r18, Y+5	; 0x05
    18b4:	3e 81       	ldd	r19, Y+6	; 0x06
    18b6:	23 30       	cpi	r18, 0x03	; 3
    18b8:	31 05       	cpc	r19, r1
    18ba:	34 f4       	brge	.+12     	; 0x18c8 <DIO_VidSetPortDirection+0x42>
    18bc:	8d 81       	ldd	r24, Y+5	; 0x05
    18be:	9e 81       	ldd	r25, Y+6	; 0x06
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	91 05       	cpc	r25, r1
    18c4:	61 f0       	breq	.+24     	; 0x18de <DIO_VidSetPortDirection+0x58>
    18c6:	51 c0       	rjmp	.+162    	; 0x196a <DIO_VidSetPortDirection+0xe4>
    18c8:	2d 81       	ldd	r18, Y+5	; 0x05
    18ca:	3e 81       	ldd	r19, Y+6	; 0x06
    18cc:	23 30       	cpi	r18, 0x03	; 3
    18ce:	31 05       	cpc	r19, r1
    18d0:	81 f0       	breq	.+32     	; 0x18f2 <DIO_VidSetPortDirection+0x6c>
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	84 30       	cpi	r24, 0x04	; 4
    18d8:	91 05       	cpc	r25, r1
    18da:	81 f0       	breq	.+32     	; 0x18fc <DIO_VidSetPortDirection+0x76>
    18dc:	46 c0       	rjmp	.+140    	; 0x196a <DIO_VidSetPortDirection+0xe4>
			{
			case (PORT_A): DDRA = 0XFF;break;
    18de:	ea e3       	ldi	r30, 0x3A	; 58
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	80 83       	st	Z, r24
    18e6:	41 c0       	rjmp	.+130    	; 0x196a <DIO_VidSetPortDirection+0xe4>
			case (PORT_B): DDRB = 0XFF;break;
    18e8:	e7 e3       	ldi	r30, 0x37	; 55
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	80 83       	st	Z, r24
    18f0:	3c c0       	rjmp	.+120    	; 0x196a <DIO_VidSetPortDirection+0xe4>
			case (PORT_C): DDRC = 0XFF;break;
    18f2:	e4 e3       	ldi	r30, 0x34	; 52
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	8f ef       	ldi	r24, 0xFF	; 255
    18f8:	80 83       	st	Z, r24
    18fa:	37 c0       	rjmp	.+110    	; 0x196a <DIO_VidSetPortDirection+0xe4>
			case (PORT_D): DDRD = 0XFF;break;
    18fc:	e1 e3       	ldi	r30, 0x31	; 49
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8f ef       	ldi	r24, 0xFF	; 255
    1902:	80 83       	st	Z, r24
    1904:	32 c0       	rjmp	.+100    	; 0x196a <DIO_VidSetPortDirection+0xe4>
			}
         }
    else if (Copy_u8Direction == INPUT)
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	88 23       	and	r24, r24
    190a:	79 f5       	brne	.+94     	; 0x196a <DIO_VidSetPortDirection+0xe4>
		{
            switch (Copy_u8Port)
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	3c 83       	std	Y+4, r19	; 0x04
    1914:	2b 83       	std	Y+3, r18	; 0x03
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	82 30       	cpi	r24, 0x02	; 2
    191c:	91 05       	cpc	r25, r1
    191e:	d1 f0       	breq	.+52     	; 0x1954 <DIO_VidSetPortDirection+0xce>
    1920:	2b 81       	ldd	r18, Y+3	; 0x03
    1922:	3c 81       	ldd	r19, Y+4	; 0x04
    1924:	23 30       	cpi	r18, 0x03	; 3
    1926:	31 05       	cpc	r19, r1
    1928:	34 f4       	brge	.+12     	; 0x1936 <DIO_VidSetPortDirection+0xb0>
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	91 05       	cpc	r25, r1
    1932:	61 f0       	breq	.+24     	; 0x194c <DIO_VidSetPortDirection+0xc6>
    1934:	1a c0       	rjmp	.+52     	; 0x196a <DIO_VidSetPortDirection+0xe4>
    1936:	2b 81       	ldd	r18, Y+3	; 0x03
    1938:	3c 81       	ldd	r19, Y+4	; 0x04
    193a:	23 30       	cpi	r18, 0x03	; 3
    193c:	31 05       	cpc	r19, r1
    193e:	71 f0       	breq	.+28     	; 0x195c <DIO_VidSetPortDirection+0xd6>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	84 30       	cpi	r24, 0x04	; 4
    1946:	91 05       	cpc	r25, r1
    1948:	69 f0       	breq	.+26     	; 0x1964 <DIO_VidSetPortDirection+0xde>
    194a:	0f c0       	rjmp	.+30     	; 0x196a <DIO_VidSetPortDirection+0xe4>
			{
			case (PORT_A): DDRA = 0x00;break;
    194c:	ea e3       	ldi	r30, 0x3A	; 58
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	10 82       	st	Z, r1
    1952:	0b c0       	rjmp	.+22     	; 0x196a <DIO_VidSetPortDirection+0xe4>
			case (PORT_B): DDRB = 0x00;break;
    1954:	e7 e3       	ldi	r30, 0x37	; 55
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	10 82       	st	Z, r1
    195a:	07 c0       	rjmp	.+14     	; 0x196a <DIO_VidSetPortDirection+0xe4>
			case (PORT_C): DDRC = 0x00;break;
    195c:	e4 e3       	ldi	r30, 0x34	; 52
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	10 82       	st	Z, r1
    1962:	03 c0       	rjmp	.+6      	; 0x196a <DIO_VidSetPortDirection+0xe4>
			case (PORT_D): DDRD = 0x00;break;
    1964:	e1 e3       	ldi	r30, 0x31	; 49
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	10 82       	st	Z, r1
			}
		}
}
    196a:	26 96       	adiw	r28, 0x06	; 6
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <DIO_VidSetPortValue>:

void DIO_VidSetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <DIO_VidSetPortValue+0x6>
    1982:	00 d0       	rcall	.+0      	; 0x1984 <DIO_VidSetPortValue+0x8>
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	3c 83       	std	Y+4, r19	; 0x04
    1994:	2b 83       	std	Y+3, r18	; 0x03
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	82 30       	cpi	r24, 0x02	; 2
    199c:	91 05       	cpc	r25, r1
    199e:	d9 f0       	breq	.+54     	; 0x19d6 <DIO_VidSetPortValue+0x5a>
    19a0:	2b 81       	ldd	r18, Y+3	; 0x03
    19a2:	3c 81       	ldd	r19, Y+4	; 0x04
    19a4:	23 30       	cpi	r18, 0x03	; 3
    19a6:	31 05       	cpc	r19, r1
    19a8:	34 f4       	brge	.+12     	; 0x19b6 <DIO_VidSetPortValue+0x3a>
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	91 05       	cpc	r25, r1
    19b2:	61 f0       	breq	.+24     	; 0x19cc <DIO_VidSetPortValue+0x50>
    19b4:	1e c0       	rjmp	.+60     	; 0x19f2 <DIO_VidSetPortValue+0x76>
    19b6:	2b 81       	ldd	r18, Y+3	; 0x03
    19b8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ba:	23 30       	cpi	r18, 0x03	; 3
    19bc:	31 05       	cpc	r19, r1
    19be:	81 f0       	breq	.+32     	; 0x19e0 <DIO_VidSetPortValue+0x64>
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	9c 81       	ldd	r25, Y+4	; 0x04
    19c4:	84 30       	cpi	r24, 0x04	; 4
    19c6:	91 05       	cpc	r25, r1
    19c8:	81 f0       	breq	.+32     	; 0x19ea <DIO_VidSetPortValue+0x6e>
    19ca:	13 c0       	rjmp	.+38     	; 0x19f2 <DIO_VidSetPortValue+0x76>
				{
				case (PORT_A): PORTA = Copy_u8Value;break;
    19cc:	eb e3       	ldi	r30, 0x3B	; 59
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	80 83       	st	Z, r24
    19d4:	0e c0       	rjmp	.+28     	; 0x19f2 <DIO_VidSetPortValue+0x76>
				case (PORT_B): PORTB = Copy_u8Value;break;
    19d6:	e8 e3       	ldi	r30, 0x38	; 56
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	80 83       	st	Z, r24
    19de:	09 c0       	rjmp	.+18     	; 0x19f2 <DIO_VidSetPortValue+0x76>
				case (PORT_C): PORTC = Copy_u8Value;break;
    19e0:	e5 e3       	ldi	r30, 0x35	; 53
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	80 83       	st	Z, r24
    19e8:	04 c0       	rjmp	.+8      	; 0x19f2 <DIO_VidSetPortValue+0x76>
				case (PORT_D): PORTD = Copy_u8Value;break;
    19ea:	e2 e3       	ldi	r30, 0x32	; 50
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	80 83       	st	Z, r24
				}
}
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port)
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	27 97       	sbiw	r28, 0x07	; 7
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	8d 83       	std	Y+5, r24	; 0x05
	u32 value;
	    switch(Copy_u8Port)
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	3f 83       	std	Y+7, r19	; 0x07
    1a1e:	2e 83       	std	Y+6, r18	; 0x06
    1a20:	8e 81       	ldd	r24, Y+6	; 0x06
    1a22:	9f 81       	ldd	r25, Y+7	; 0x07
    1a24:	82 30       	cpi	r24, 0x02	; 2
    1a26:	91 05       	cpc	r25, r1
    1a28:	11 f1       	breq	.+68     	; 0x1a6e <DIO_u8GetPortValue+0x6e>
    1a2a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a2c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a2e:	23 30       	cpi	r18, 0x03	; 3
    1a30:	31 05       	cpc	r19, r1
    1a32:	34 f4       	brge	.+12     	; 0x1a40 <DIO_u8GetPortValue+0x40>
    1a34:	8e 81       	ldd	r24, Y+6	; 0x06
    1a36:	9f 81       	ldd	r25, Y+7	; 0x07
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	61 f0       	breq	.+24     	; 0x1a56 <DIO_u8GetPortValue+0x56>
    1a3e:	3a c0       	rjmp	.+116    	; 0x1ab4 <DIO_u8GetPortValue+0xb4>
    1a40:	2e 81       	ldd	r18, Y+6	; 0x06
    1a42:	3f 81       	ldd	r19, Y+7	; 0x07
    1a44:	23 30       	cpi	r18, 0x03	; 3
    1a46:	31 05       	cpc	r19, r1
    1a48:	f1 f0       	breq	.+60     	; 0x1a86 <DIO_u8GetPortValue+0x86>
    1a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4e:	84 30       	cpi	r24, 0x04	; 4
    1a50:	91 05       	cpc	r25, r1
    1a52:	29 f1       	breq	.+74     	; 0x1a9e <DIO_u8GetPortValue+0x9e>
    1a54:	2f c0       	rjmp	.+94     	; 0x1ab4 <DIO_u8GetPortValue+0xb4>
				{
				case(PORT_A):value = PINA;break;
    1a56:	e9 e3       	ldi	r30, 0x39	; 57
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e0       	ldi	r26, 0x00	; 0
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	ab 83       	std	Y+3, r26	; 0x03
    1a6a:	bc 83       	std	Y+4, r27	; 0x04
    1a6c:	23 c0       	rjmp	.+70     	; 0x1ab4 <DIO_u8GetPortValue+0xb4>
				case(PORT_B):value = PINB;break;
    1a6e:	e6 e3       	ldi	r30, 0x36	; 54
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a0 e0       	ldi	r26, 0x00	; 0
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	ab 83       	std	Y+3, r26	; 0x03
    1a82:	bc 83       	std	Y+4, r27	; 0x04
    1a84:	17 c0       	rjmp	.+46     	; 0x1ab4 <DIO_u8GetPortValue+0xb4>
				case(PORT_C):value = PINC;break;
    1a86:	e3 e3       	ldi	r30, 0x33	; 51
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e0       	ldi	r26, 0x00	; 0
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	ab 83       	std	Y+3, r26	; 0x03
    1a9a:	bc 83       	std	Y+4, r27	; 0x04
    1a9c:	0b c0       	rjmp	.+22     	; 0x1ab4 <DIO_u8GetPortValue+0xb4>
				case(PORT_D):value = PIND;break;
    1a9e:	e0 e3       	ldi	r30, 0x30	; 48
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	88 2f       	mov	r24, r24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	ab 83       	std	Y+3, r26	; 0x03
    1ab2:	bc 83       	std	Y+4, r27	; 0x04
				}

		return value;
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab6:	27 96       	adiw	r28, 0x07	; 7
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <DIO_VidSetPinDirection>:


void DIO_VidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	27 97       	sbiw	r28, 0x07	; 7
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	6a 83       	std	Y+2, r22	; 0x02
    1ae0:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Direction == OUTPUT)
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <DIO_VidSetPinDirection+0x22>
    1ae8:	70 c0       	rjmp	.+224    	; 0x1bca <DIO_VidSetPinDirection+0x102>
	{
		switch (Copy_u8Port)
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3f 83       	std	Y+7, r19	; 0x07
    1af2:	2e 83       	std	Y+6, r18	; 0x06
    1af4:	8e 81       	ldd	r24, Y+6	; 0x06
    1af6:	9f 81       	ldd	r25, Y+7	; 0x07
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	91 05       	cpc	r25, r1
    1afc:	51 f1       	breq	.+84     	; 0x1b52 <DIO_VidSetPinDirection+0x8a>
    1afe:	2e 81       	ldd	r18, Y+6	; 0x06
    1b00:	3f 81       	ldd	r19, Y+7	; 0x07
    1b02:	23 30       	cpi	r18, 0x03	; 3
    1b04:	31 05       	cpc	r19, r1
    1b06:	34 f4       	brge	.+12     	; 0x1b14 <DIO_VidSetPinDirection+0x4c>
    1b08:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0c:	81 30       	cpi	r24, 0x01	; 1
    1b0e:	91 05       	cpc	r25, r1
    1b10:	61 f0       	breq	.+24     	; 0x1b2a <DIO_VidSetPinDirection+0x62>
    1b12:	d3 c0       	rjmp	.+422    	; 0x1cba <DIO_VidSetPinDirection+0x1f2>
    1b14:	2e 81       	ldd	r18, Y+6	; 0x06
    1b16:	3f 81       	ldd	r19, Y+7	; 0x07
    1b18:	23 30       	cpi	r18, 0x03	; 3
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	71 f1       	breq	.+92     	; 0x1b7a <DIO_VidSetPinDirection+0xb2>
    1b1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b20:	9f 81       	ldd	r25, Y+7	; 0x07
    1b22:	84 30       	cpi	r24, 0x04	; 4
    1b24:	91 05       	cpc	r25, r1
    1b26:	e9 f1       	breq	.+122    	; 0x1ba2 <DIO_VidSetPinDirection+0xda>
    1b28:	c8 c0       	rjmp	.+400    	; 0x1cba <DIO_VidSetPinDirection+0x1f2>
		{
		case (PORT_A): SET_BIT(DDRA,Copy_u8Pin);break;
    1b2a:	aa e3       	ldi	r26, 0x3A	; 58
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	ea e3       	ldi	r30, 0x3A	; 58
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_VidSetPinDirection+0x80>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <DIO_VidSetPinDirection+0x7c>
    1b4c:	84 2b       	or	r24, r20
    1b4e:	8c 93       	st	X, r24
    1b50:	b4 c0       	rjmp	.+360    	; 0x1cba <DIO_VidSetPinDirection+0x1f2>
		case (PORT_B): SET_BIT(DDRB,Copy_u8Pin);break;
    1b52:	a7 e3       	ldi	r26, 0x37	; 55
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e7 e3       	ldi	r30, 0x37	; 55
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	48 2f       	mov	r20, r24
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 2e       	mov	r0, r18
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <DIO_VidSetPinDirection+0xa8>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	0a 94       	dec	r0
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <DIO_VidSetPinDirection+0xa4>
    1b74:	84 2b       	or	r24, r20
    1b76:	8c 93       	st	X, r24
    1b78:	a0 c0       	rjmp	.+320    	; 0x1cba <DIO_VidSetPinDirection+0x1f2>
		case (PORT_C): SET_BIT(DDRC,Copy_u8Pin);break;
    1b7a:	a4 e3       	ldi	r26, 0x34	; 52
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e4 e3       	ldi	r30, 0x34	; 52
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <DIO_VidSetPinDirection+0xd0>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <DIO_VidSetPinDirection+0xcc>
    1b9c:	84 2b       	or	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	8c c0       	rjmp	.+280    	; 0x1cba <DIO_VidSetPinDirection+0x1f2>
		case (PORT_D): SET_BIT(DDRD,Copy_u8Pin);break;
    1ba2:	a1 e3       	ldi	r26, 0x31	; 49
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e1 e3       	ldi	r30, 0x31	; 49
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <DIO_VidSetPinDirection+0xf8>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <DIO_VidSetPinDirection+0xf4>
    1bc4:	84 2b       	or	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	78 c0       	rjmp	.+240    	; 0x1cba <DIO_VidSetPinDirection+0x1f2>
		}
	}
	else if (Copy_u8Direction == INPUT)
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	88 23       	and	r24, r24
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <DIO_VidSetPinDirection+0x10a>
    1bd0:	74 c0       	rjmp	.+232    	; 0x1cba <DIO_VidSetPinDirection+0x1f2>
	{
		switch (Copy_u8Port)
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	3d 83       	std	Y+5, r19	; 0x05
    1bda:	2c 83       	std	Y+4, r18	; 0x04
    1bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bde:	9d 81       	ldd	r25, Y+5	; 0x05
    1be0:	82 30       	cpi	r24, 0x02	; 2
    1be2:	91 05       	cpc	r25, r1
    1be4:	61 f1       	breq	.+88     	; 0x1c3e <DIO_VidSetPinDirection+0x176>
    1be6:	2c 81       	ldd	r18, Y+4	; 0x04
    1be8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bea:	23 30       	cpi	r18, 0x03	; 3
    1bec:	31 05       	cpc	r19, r1
    1bee:	34 f4       	brge	.+12     	; 0x1bfc <DIO_VidSetPinDirection+0x134>
    1bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	69 f0       	breq	.+26     	; 0x1c14 <DIO_VidSetPinDirection+0x14c>
    1bfa:	5f c0       	rjmp	.+190    	; 0x1cba <DIO_VidSetPinDirection+0x1f2>
    1bfc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bfe:	3d 81       	ldd	r19, Y+5	; 0x05
    1c00:	23 30       	cpi	r18, 0x03	; 3
    1c02:	31 05       	cpc	r19, r1
    1c04:	89 f1       	breq	.+98     	; 0x1c68 <DIO_VidSetPinDirection+0x1a0>
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0a:	84 30       	cpi	r24, 0x04	; 4
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <DIO_VidSetPinDirection+0x14a>
    1c10:	40 c0       	rjmp	.+128    	; 0x1c92 <DIO_VidSetPinDirection+0x1ca>
    1c12:	53 c0       	rjmp	.+166    	; 0x1cba <DIO_VidSetPinDirection+0x1f2>
		{
		case (PORT_A): CLR_BIT(DDRA,Copy_u8Pin);break;
    1c14:	aa e3       	ldi	r26, 0x3A	; 58
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	ea e3       	ldi	r30, 0x3A	; 58
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <DIO_VidSetPinDirection+0x16a>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <DIO_VidSetPinDirection+0x166>
    1c36:	80 95       	com	r24
    1c38:	84 23       	and	r24, r20
    1c3a:	8c 93       	st	X, r24
    1c3c:	3e c0       	rjmp	.+124    	; 0x1cba <DIO_VidSetPinDirection+0x1f2>
		case (PORT_B): CLR_BIT(DDRB,Copy_u8Pin);break;
    1c3e:	a7 e3       	ldi	r26, 0x37	; 55
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e7 e3       	ldi	r30, 0x37	; 55
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	48 2f       	mov	r20, r24
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 2e       	mov	r0, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <DIO_VidSetPinDirection+0x194>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	0a 94       	dec	r0
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <DIO_VidSetPinDirection+0x190>
    1c60:	80 95       	com	r24
    1c62:	84 23       	and	r24, r20
    1c64:	8c 93       	st	X, r24
    1c66:	29 c0       	rjmp	.+82     	; 0x1cba <DIO_VidSetPinDirection+0x1f2>
		case (PORT_C): CLR_BIT(DDRC,Copy_u8Pin);break;
    1c68:	a4 e3       	ldi	r26, 0x34	; 52
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e4 e3       	ldi	r30, 0x34	; 52
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	48 2f       	mov	r20, r24
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	02 2e       	mov	r0, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <DIO_VidSetPinDirection+0x1be>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	0a 94       	dec	r0
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <DIO_VidSetPinDirection+0x1ba>
    1c8a:	80 95       	com	r24
    1c8c:	84 23       	and	r24, r20
    1c8e:	8c 93       	st	X, r24
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <DIO_VidSetPinDirection+0x1f2>
		case (PORT_D): CLR_BIT(DDRD,Copy_u8Pin);break;
    1c92:	a1 e3       	ldi	r26, 0x31	; 49
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e1 e3       	ldi	r30, 0x31	; 49
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 2e       	mov	r0, r18
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <DIO_VidSetPinDirection+0x1e8>
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	0a 94       	dec	r0
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <DIO_VidSetPinDirection+0x1e4>
    1cb4:	80 95       	com	r24
    1cb6:	84 23       	and	r24, r20
    1cb8:	8c 93       	st	X, r24
		}
	}
}
    1cba:	27 96       	adiw	r28, 0x07	; 7
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <DIO_VidSetPinValue>:

void DIO_VidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	27 97       	sbiw	r28, 0x07	; 7
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	6a 83       	std	Y+2, r22	; 0x02
    1ce4:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == HIGH)
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	09 f0       	breq	.+2      	; 0x1cee <DIO_VidSetPinValue+0x22>
    1cec:	70 c0       	rjmp	.+224    	; 0x1dce <DIO_VidSetPinValue+0x102>
		{
			switch (Copy_u8Port)
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	3f 83       	std	Y+7, r19	; 0x07
    1cf6:	2e 83       	std	Y+6, r18	; 0x06
    1cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfa:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfc:	82 30       	cpi	r24, 0x02	; 2
    1cfe:	91 05       	cpc	r25, r1
    1d00:	51 f1       	breq	.+84     	; 0x1d56 <DIO_VidSetPinValue+0x8a>
    1d02:	2e 81       	ldd	r18, Y+6	; 0x06
    1d04:	3f 81       	ldd	r19, Y+7	; 0x07
    1d06:	23 30       	cpi	r18, 0x03	; 3
    1d08:	31 05       	cpc	r19, r1
    1d0a:	34 f4       	brge	.+12     	; 0x1d18 <DIO_VidSetPinValue+0x4c>
    1d0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	91 05       	cpc	r25, r1
    1d14:	61 f0       	breq	.+24     	; 0x1d2e <DIO_VidSetPinValue+0x62>
    1d16:	d3 c0       	rjmp	.+422    	; 0x1ebe <DIO_VidSetPinValue+0x1f2>
    1d18:	2e 81       	ldd	r18, Y+6	; 0x06
    1d1a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d1c:	23 30       	cpi	r18, 0x03	; 3
    1d1e:	31 05       	cpc	r19, r1
    1d20:	71 f1       	breq	.+92     	; 0x1d7e <DIO_VidSetPinValue+0xb2>
    1d22:	8e 81       	ldd	r24, Y+6	; 0x06
    1d24:	9f 81       	ldd	r25, Y+7	; 0x07
    1d26:	84 30       	cpi	r24, 0x04	; 4
    1d28:	91 05       	cpc	r25, r1
    1d2a:	e9 f1       	breq	.+122    	; 0x1da6 <DIO_VidSetPinValue+0xda>
    1d2c:	c8 c0       	rjmp	.+400    	; 0x1ebe <DIO_VidSetPinValue+0x1f2>
			{
			case (PORT_A): SET_BIT(PORTA,Copy_u8Pin);break;
    1d2e:	ab e3       	ldi	r26, 0x3B	; 59
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	eb e3       	ldi	r30, 0x3B	; 59
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	48 2f       	mov	r20, r24
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	02 2e       	mov	r0, r18
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <DIO_VidSetPinValue+0x80>
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	0a 94       	dec	r0
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <DIO_VidSetPinValue+0x7c>
    1d50:	84 2b       	or	r24, r20
    1d52:	8c 93       	st	X, r24
    1d54:	b4 c0       	rjmp	.+360    	; 0x1ebe <DIO_VidSetPinValue+0x1f2>
			case (PORT_B): SET_BIT(PORTB,Copy_u8Pin);break;
    1d56:	a8 e3       	ldi	r26, 0x38	; 56
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e8 e3       	ldi	r30, 0x38	; 56
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	48 2f       	mov	r20, r24
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 2e       	mov	r0, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <DIO_VidSetPinValue+0xa8>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <DIO_VidSetPinValue+0xa4>
    1d78:	84 2b       	or	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	a0 c0       	rjmp	.+320    	; 0x1ebe <DIO_VidSetPinValue+0x1f2>
			case (PORT_C): SET_BIT(PORTC,Copy_u8Pin);break;
    1d7e:	a5 e3       	ldi	r26, 0x35	; 53
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e5 e3       	ldi	r30, 0x35	; 53
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <DIO_VidSetPinValue+0xd0>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <DIO_VidSetPinValue+0xcc>
    1da0:	84 2b       	or	r24, r20
    1da2:	8c 93       	st	X, r24
    1da4:	8c c0       	rjmp	.+280    	; 0x1ebe <DIO_VidSetPinValue+0x1f2>
			case (PORT_D): SET_BIT(PORTD,Copy_u8Pin);break;
    1da6:	a2 e3       	ldi	r26, 0x32	; 50
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e2 e3       	ldi	r30, 0x32	; 50
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <DIO_VidSetPinValue+0xf8>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <DIO_VidSetPinValue+0xf4>
    1dc8:	84 2b       	or	r24, r20
    1dca:	8c 93       	st	X, r24
    1dcc:	78 c0       	rjmp	.+240    	; 0x1ebe <DIO_VidSetPinValue+0x1f2>
			}
		}
		else if (Copy_u8Value == LOW)
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	88 23       	and	r24, r24
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <DIO_VidSetPinValue+0x10a>
    1dd4:	74 c0       	rjmp	.+232    	; 0x1ebe <DIO_VidSetPinValue+0x1f2>
		{
			switch (Copy_u8Port)
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	3d 83       	std	Y+5, r19	; 0x05
    1dde:	2c 83       	std	Y+4, r18	; 0x04
    1de0:	8c 81       	ldd	r24, Y+4	; 0x04
    1de2:	9d 81       	ldd	r25, Y+5	; 0x05
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	91 05       	cpc	r25, r1
    1de8:	61 f1       	breq	.+88     	; 0x1e42 <DIO_VidSetPinValue+0x176>
    1dea:	2c 81       	ldd	r18, Y+4	; 0x04
    1dec:	3d 81       	ldd	r19, Y+5	; 0x05
    1dee:	23 30       	cpi	r18, 0x03	; 3
    1df0:	31 05       	cpc	r19, r1
    1df2:	34 f4       	brge	.+12     	; 0x1e00 <DIO_VidSetPinValue+0x134>
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	9d 81       	ldd	r25, Y+5	; 0x05
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	69 f0       	breq	.+26     	; 0x1e18 <DIO_VidSetPinValue+0x14c>
    1dfe:	5f c0       	rjmp	.+190    	; 0x1ebe <DIO_VidSetPinValue+0x1f2>
    1e00:	2c 81       	ldd	r18, Y+4	; 0x04
    1e02:	3d 81       	ldd	r19, Y+5	; 0x05
    1e04:	23 30       	cpi	r18, 0x03	; 3
    1e06:	31 05       	cpc	r19, r1
    1e08:	89 f1       	breq	.+98     	; 0x1e6c <DIO_VidSetPinValue+0x1a0>
    1e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0e:	84 30       	cpi	r24, 0x04	; 4
    1e10:	91 05       	cpc	r25, r1
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <DIO_VidSetPinValue+0x14a>
    1e14:	40 c0       	rjmp	.+128    	; 0x1e96 <DIO_VidSetPinValue+0x1ca>
    1e16:	53 c0       	rjmp	.+166    	; 0x1ebe <DIO_VidSetPinValue+0x1f2>
			{
			case (PORT_A): CLR_BIT(PORTA,Copy_u8Pin);break;
    1e18:	ab e3       	ldi	r26, 0x3B	; 59
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	eb e3       	ldi	r30, 0x3B	; 59
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	48 2f       	mov	r20, r24
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 2e       	mov	r0, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <DIO_VidSetPinValue+0x16a>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0a 94       	dec	r0
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <DIO_VidSetPinValue+0x166>
    1e3a:	80 95       	com	r24
    1e3c:	84 23       	and	r24, r20
    1e3e:	8c 93       	st	X, r24
    1e40:	3e c0       	rjmp	.+124    	; 0x1ebe <DIO_VidSetPinValue+0x1f2>
			case (PORT_B): CLR_BIT(PORTB,Copy_u8Pin);break;
    1e42:	a8 e3       	ldi	r26, 0x38	; 56
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e8 e3       	ldi	r30, 0x38	; 56
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	48 2f       	mov	r20, r24
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 2e       	mov	r0, r18
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <DIO_VidSetPinValue+0x194>
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	0a 94       	dec	r0
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <DIO_VidSetPinValue+0x190>
    1e64:	80 95       	com	r24
    1e66:	84 23       	and	r24, r20
    1e68:	8c 93       	st	X, r24
    1e6a:	29 c0       	rjmp	.+82     	; 0x1ebe <DIO_VidSetPinValue+0x1f2>
			case (PORT_C): CLR_BIT(PORTC,Copy_u8Pin);break;
    1e6c:	a5 e3       	ldi	r26, 0x35	; 53
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e5 e3       	ldi	r30, 0x35	; 53
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	48 2f       	mov	r20, r24
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	02 2e       	mov	r0, r18
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <DIO_VidSetPinValue+0x1be>
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	0a 94       	dec	r0
    1e8c:	e2 f7       	brpl	.-8      	; 0x1e86 <DIO_VidSetPinValue+0x1ba>
    1e8e:	80 95       	com	r24
    1e90:	84 23       	and	r24, r20
    1e92:	8c 93       	st	X, r24
    1e94:	14 c0       	rjmp	.+40     	; 0x1ebe <DIO_VidSetPinValue+0x1f2>
			case (PORT_D): CLR_BIT(PORTD,Copy_u8Pin);break;
    1e96:	a2 e3       	ldi	r26, 0x32	; 50
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e2 e3       	ldi	r30, 0x32	; 50
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	48 2f       	mov	r20, r24
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	02 2e       	mov	r0, r18
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <DIO_VidSetPinValue+0x1e8>
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	0a 94       	dec	r0
    1eb6:	e2 f7       	brpl	.-8      	; 0x1eb0 <DIO_VidSetPinValue+0x1e4>
    1eb8:	80 95       	com	r24
    1eba:	84 23       	and	r24, r20
    1ebc:	8c 93       	st	X, r24
			}
		}
}
    1ebe:	27 96       	adiw	r28, 0x07	; 7
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	28 97       	sbiw	r28, 0x08	; 8
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	6e 83       	std	Y+6, r22	; 0x06
	   u32 value;
	
		switch(Copy_u8Port)
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	38 87       	std	Y+8, r19	; 0x08
    1ef0:	2f 83       	std	Y+7, r18	; 0x07
    1ef2:	4f 81       	ldd	r20, Y+7	; 0x07
    1ef4:	58 85       	ldd	r21, Y+8	; 0x08
    1ef6:	42 30       	cpi	r20, 0x02	; 2
    1ef8:	51 05       	cpc	r21, r1
    1efa:	a1 f1       	breq	.+104    	; 0x1f64 <DIO_u8GetPinValue+0x94>
    1efc:	8f 81       	ldd	r24, Y+7	; 0x07
    1efe:	98 85       	ldd	r25, Y+8	; 0x08
    1f00:	83 30       	cpi	r24, 0x03	; 3
    1f02:	91 05       	cpc	r25, r1
    1f04:	34 f4       	brge	.+12     	; 0x1f12 <DIO_u8GetPinValue+0x42>
    1f06:	2f 81       	ldd	r18, Y+7	; 0x07
    1f08:	38 85       	ldd	r19, Y+8	; 0x08
    1f0a:	21 30       	cpi	r18, 0x01	; 1
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	71 f0       	breq	.+28     	; 0x1f2c <DIO_u8GetPinValue+0x5c>
    1f10:	7c c0       	rjmp	.+248    	; 0x200a <DIO_u8GetPinValue+0x13a>
    1f12:	4f 81       	ldd	r20, Y+7	; 0x07
    1f14:	58 85       	ldd	r21, Y+8	; 0x08
    1f16:	43 30       	cpi	r20, 0x03	; 3
    1f18:	51 05       	cpc	r21, r1
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <DIO_u8GetPinValue+0x4e>
    1f1c:	3f c0       	rjmp	.+126    	; 0x1f9c <DIO_u8GetPinValue+0xcc>
    1f1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f20:	98 85       	ldd	r25, Y+8	; 0x08
    1f22:	84 30       	cpi	r24, 0x04	; 4
    1f24:	91 05       	cpc	r25, r1
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <DIO_u8GetPinValue+0x5a>
    1f28:	55 c0       	rjmp	.+170    	; 0x1fd4 <DIO_u8GetPinValue+0x104>
    1f2a:	6f c0       	rjmp	.+222    	; 0x200a <DIO_u8GetPinValue+0x13a>
		    {
			case(PORT_A): value = GET_BIT(PINA,Copy_u8Pin);break;
    1f2c:	e9 e3       	ldi	r30, 0x39	; 57
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	8e 81       	ldd	r24, Y+6	; 0x06
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a9 01       	movw	r20, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <DIO_u8GetPinValue+0x74>
    1f40:	55 95       	asr	r21
    1f42:	47 95       	ror	r20
    1f44:	8a 95       	dec	r24
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <DIO_u8GetPinValue+0x70>
    1f48:	ca 01       	movw	r24, r20
    1f4a:	aa 27       	eor	r26, r26
    1f4c:	97 fd       	sbrc	r25, 7
    1f4e:	a0 95       	com	r26
    1f50:	ba 2f       	mov	r27, r26
    1f52:	81 70       	andi	r24, 0x01	; 1
    1f54:	90 70       	andi	r25, 0x00	; 0
    1f56:	a0 70       	andi	r26, 0x00	; 0
    1f58:	b0 70       	andi	r27, 0x00	; 0
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	ab 83       	std	Y+3, r26	; 0x03
    1f60:	bc 83       	std	Y+4, r27	; 0x04
    1f62:	53 c0       	rjmp	.+166    	; 0x200a <DIO_u8GetPinValue+0x13a>
			case(PORT_B): value = GET_BIT(PINB,Copy_u8Pin);break;
    1f64:	e6 e3       	ldi	r30, 0x36	; 54
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a9 01       	movw	r20, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <DIO_u8GetPinValue+0xac>
    1f78:	55 95       	asr	r21
    1f7a:	47 95       	ror	r20
    1f7c:	8a 95       	dec	r24
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <DIO_u8GetPinValue+0xa8>
    1f80:	ca 01       	movw	r24, r20
    1f82:	aa 27       	eor	r26, r26
    1f84:	97 fd       	sbrc	r25, 7
    1f86:	a0 95       	com	r26
    1f88:	ba 2f       	mov	r27, r26
    1f8a:	81 70       	andi	r24, 0x01	; 1
    1f8c:	90 70       	andi	r25, 0x00	; 0
    1f8e:	a0 70       	andi	r26, 0x00	; 0
    1f90:	b0 70       	andi	r27, 0x00	; 0
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	ab 83       	std	Y+3, r26	; 0x03
    1f98:	bc 83       	std	Y+4, r27	; 0x04
    1f9a:	37 c0       	rjmp	.+110    	; 0x200a <DIO_u8GetPinValue+0x13a>
			case(PORT_C): value = GET_BIT(PINC,Copy_u8Pin);break;
    1f9c:	e3 e3       	ldi	r30, 0x33	; 51
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	a9 01       	movw	r20, r18
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <DIO_u8GetPinValue+0xe4>
    1fb0:	55 95       	asr	r21
    1fb2:	47 95       	ror	r20
    1fb4:	8a 95       	dec	r24
    1fb6:	e2 f7       	brpl	.-8      	; 0x1fb0 <DIO_u8GetPinValue+0xe0>
    1fb8:	ca 01       	movw	r24, r20
    1fba:	aa 27       	eor	r26, r26
    1fbc:	97 fd       	sbrc	r25, 7
    1fbe:	a0 95       	com	r26
    1fc0:	ba 2f       	mov	r27, r26
    1fc2:	81 70       	andi	r24, 0x01	; 1
    1fc4:	90 70       	andi	r25, 0x00	; 0
    1fc6:	a0 70       	andi	r26, 0x00	; 0
    1fc8:	b0 70       	andi	r27, 0x00	; 0
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
    1fce:	ab 83       	std	Y+3, r26	; 0x03
    1fd0:	bc 83       	std	Y+4, r27	; 0x04
    1fd2:	1b c0       	rjmp	.+54     	; 0x200a <DIO_u8GetPinValue+0x13a>
			case(PORT_D): value = GET_BIT(PIND,Copy_u8Pin);break;
    1fd4:	e0 e3       	ldi	r30, 0x30	; 48
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe0:	88 2f       	mov	r24, r24
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a9 01       	movw	r20, r18
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <DIO_u8GetPinValue+0x11c>
    1fe8:	55 95       	asr	r21
    1fea:	47 95       	ror	r20
    1fec:	8a 95       	dec	r24
    1fee:	e2 f7       	brpl	.-8      	; 0x1fe8 <DIO_u8GetPinValue+0x118>
    1ff0:	ca 01       	movw	r24, r20
    1ff2:	aa 27       	eor	r26, r26
    1ff4:	97 fd       	sbrc	r25, 7
    1ff6:	a0 95       	com	r26
    1ff8:	ba 2f       	mov	r27, r26
    1ffa:	81 70       	andi	r24, 0x01	; 1
    1ffc:	90 70       	andi	r25, 0x00	; 0
    1ffe:	a0 70       	andi	r26, 0x00	; 0
    2000:	b0 70       	andi	r27, 0x00	; 0
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	ab 83       	std	Y+3, r26	; 0x03
    2008:	bc 83       	std	Y+4, r27	; 0x04
			}
		
	return value;
    200a:	89 81       	ldd	r24, Y+1	; 0x01
}
    200c:	28 96       	adiw	r28, 0x08	; 8
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <ADC_VidInit>:
static u16* ADC_u16PtrReading =NULL;

u8 ADC_u8BusyState = IDLE;

void ADC_VidInit(void)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	0f 92       	push	r0
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
   #if VOLTAGE_REFERENCE == AREF
	   CLR_BIT(ADMUX , ADMUX_REFS0);
	   CLR_BIT(ADMUX , ADMUX_REFS1);

   #elif VOLTAGE_REFERENCE == AVCC
	     SET_BIT(ADMUX , ADMUX_REFS0);
    2028:	a7 e2       	ldi	r26, 0x27	; 39
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e7 e2       	ldi	r30, 0x27	; 39
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	80 64       	ori	r24, 0x40	; 64
    2034:	8c 93       	st	X, r24
	     CLR_BIT(ADMUX , ADMUX_REFS1);
    2036:	a7 e2       	ldi	r26, 0x27	; 39
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e7 e2       	ldi	r30, 0x27	; 39
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	8f 77       	andi	r24, 0x7F	; 127
    2042:	8c 93       	st	X, r24
   #error "Wrong VOLTAGE_REFERENCE Configuration option"
   #endif

	/*Activate left adjust result*/
   #if LEFT_ADJUST == ENABLED
	   SET_BIT(ADMUX , ADMUX_ADLAR);
    2044:	a7 e2       	ldi	r26, 0x27	; 39
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e7 e2       	ldi	r30, 0x27	; 39
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	80 62       	ori	r24, 0x20	; 32
    2050:	8c 93       	st	X, r24
   #else
   #error "Wrong LEFT_ADJUST Configuration option"
   #endif

	/*Set ADC Prescaler */
    ADCSRC &= PRESCALER_MASK;
    2052:	a6 e2       	ldi	r26, 0x26	; 38
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e6 e2       	ldi	r30, 0x26	; 38
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	88 7f       	andi	r24, 0xF8	; 248
    205e:	8c 93       	st	X, r24
    ADCSRC |= PRESCALER_DIV;
    2060:	e6 e2       	ldi	r30, 0x26	; 38
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	e6 e2       	ldi	r30, 0x26	; 38
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	8f ef       	ldi	r24, 0xFF	; 255
    206c:	80 83       	st	Z, r24

    /* Check Peripheral interrupt enable initial state*/
    #if ADC_INITIAL_STATE == ENABLED
        SET_BIT(ADCSRC , ADCSRA_ADEN);
    206e:	a6 e2       	ldi	r26, 0x26	; 38
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e6 e2       	ldi	r30, 0x26	; 38
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	80 68       	ori	r24, 0x80	; 128
    207a:	8c 93       	st	X, r24
        SFIOR |= ADC_AUTO_TRIGGER_SOURCE;

        SET_BIT(ADCSRC , ADCSRA_ADSC);

    #elif ADC_CONVERSION == SINGLE_CONVERSTION
          CLR_BIT(ADCSRC , ADCSRA_ADATE);
    207c:	a6 e2       	ldi	r26, 0x26	; 38
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e6 e2       	ldi	r30, 0x26	; 38
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	8f 7d       	andi	r24, 0xDF	; 223
    2088:	8c 93       	st	X, r24

    #if ADC_INTERRUPT == ENABLED
        SET_BIT(ADCSRC , ADCSRA_ADIE);

   #elif ADC_INTERRUPT == DISABLED
         CLR_BIT(ADCSRC , ADCSRA_ADIE);
    208a:	a6 e2       	ldi	r26, 0x26	; 38
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e6 e2       	ldi	r30, 0x26	; 38
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	87 7f       	andi	r24, 0xF7	; 247
    2096:	8c 93       	st	X, r24

   #else
   #error "Wrong ADC_INTERRUPT Configuration option"
   #endif
}
    2098:	0f 90       	pop	r0
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel , u16* Copy_u16PtrReading)
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	29 97       	sbiw	r28, 0x09	; 9
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	8f 83       	std	Y+7, r24	; 0x07
    20b6:	79 87       	std	Y+9, r23	; 0x09
    20b8:	68 87       	std	Y+8, r22	; 0x08
	u32 Local_u32Counter =0;
    20ba:	1b 82       	std	Y+3, r1	; 0x03
    20bc:	1c 82       	std	Y+4, r1	; 0x04
    20be:	1d 82       	std	Y+5, r1	; 0x05
    20c0:	1e 82       	std	Y+6, r1	; 0x06
    u8  Local_u8ErrorState =OK;
    20c2:	1a 82       	std	Y+2, r1	; 0x02

 if(ADC_u8BusyState == IDLE)
    20c4:	80 91 60 00 	lds	r24, 0x0060
    20c8:	81 30       	cpi	r24, 0x01	; 1
    20ca:	09 f0       	breq	.+2      	; 0x20ce <ADC_u8StartConversionSynch+0x2e>
    20cc:	63 c0       	rjmp	.+198    	; 0x2194 <ADC_u8StartConversionSynch+0xf4>
 {
	 /*Make ADC busy in order not to work until being idle*/
	 ADC_u8BusyState = BUSY;
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	80 93 60 00 	sts	0x0060, r24
     #if ANALOG_CHANNEL_MODE == SINGLE_ENDED
	     ADMUX &= ADC_INPUT_CHANNEL_MASK;
    20d4:	a7 e2       	ldi	r26, 0x27	; 39
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e7 e2       	ldi	r30, 0x27	; 39
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	80 7e       	andi	r24, 0xE0	; 224
    20e0:	8c 93       	st	X, r24
	     ADMUX |= SINGLE_ENDED_INPUT;
    20e2:	a7 e2       	ldi	r26, 0x27	; 39
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e7 e2       	ldi	r30, 0x27	; 39
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	80 6e       	ori	r24, 0xE0	; 224
    20ee:	8c 93       	st	X, r24
     #else
     #error "Wrong ANALOG_CHANNEL_MODE Configuration option"
     #endif

     #if ADC_CONVERSION == SINGLE_CONVERSTION
         CLR_BIT(ADCSRC , ADCSRA_ADATE);
    20f0:	a6 e2       	ldi	r26, 0x26	; 38
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e6 e2       	ldi	r30, 0x26	; 38
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	8f 7d       	andi	r24, 0xDF	; 223
    20fc:	8c 93       	st	X, r24
         SET_BIT(ADCSRC , ADCSRA_ADSC);
    20fe:	a6 e2       	ldi	r26, 0x26	; 38
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e6 e2       	ldi	r30, 0x26	; 38
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	80 64       	ori	r24, 0x40	; 64
    210a:	8c 93       	st	X, r24
    210c:	0b c0       	rjmp	.+22     	; 0x2124 <ADC_u8StartConversionSynch+0x84>
     #endif

       /*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value */
       while(((GET_BIT(ADCSRC , ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
       {
    	   Local_u32Counter++;
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	ad 81       	ldd	r26, Y+5	; 0x05
    2114:	be 81       	ldd	r27, Y+6	; 0x06
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	a1 1d       	adc	r26, r1
    211a:	b1 1d       	adc	r27, r1
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	9c 83       	std	Y+4, r25	; 0x04
    2120:	ad 83       	std	Y+5, r26	; 0x05
    2122:	be 83       	std	Y+6, r27	; 0x06
         CLR_BIT(ADCSRC , ADCSRA_ADATE);
         SET_BIT(ADCSRC , ADCSRA_ADSC);
     #endif

       /*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value */
       while(((GET_BIT(ADCSRC , ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
    2124:	e6 e2       	ldi	r30, 0x26	; 38
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	82 95       	swap	r24
    212c:	8f 70       	andi	r24, 0x0F	; 15
    212e:	88 2f       	mov	r24, r24
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	81 70       	andi	r24, 0x01	; 1
    2134:	90 70       	andi	r25, 0x00	; 0
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	61 f4       	brne	.+24     	; 0x2152 <ADC_u8StartConversionSynch+0xb2>
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	ad 81       	ldd	r26, Y+5	; 0x05
    2140:	be 81       	ldd	r27, Y+6	; 0x06
    2142:	80 35       	cpi	r24, 0x50	; 80
    2144:	23 ec       	ldi	r18, 0xC3	; 195
    2146:	92 07       	cpc	r25, r18
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	a2 07       	cpc	r26, r18
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	b2 07       	cpc	r27, r18
    2150:	f1 f6       	brne	.-68     	; 0x210e <ADC_u8StartConversionSynch+0x6e>
       {
    	   Local_u32Counter++;
       }

       if(Local_u32Counter == ADC_u32TIMEOUT)
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	ad 81       	ldd	r26, Y+5	; 0x05
    2158:	be 81       	ldd	r27, Y+6	; 0x06
    215a:	80 35       	cpi	r24, 0x50	; 80
    215c:	23 ec       	ldi	r18, 0xC3	; 195
    215e:	92 07       	cpc	r25, r18
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	a2 07       	cpc	r26, r18
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	b2 07       	cpc	r27, r18
    2168:	19 f4       	brne	.+6      	; 0x2170 <ADC_u8StartConversionSynch+0xd0>
       {
    	   /*Loop is broken because the timeout is reached */
    	   Local_u8ErrorState = NOK;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	8a 83       	std	Y+2, r24	; 0x02
    216e:	14 c0       	rjmp	.+40     	; 0x2198 <ADC_u8StartConversionSynch+0xf8>
       }
       else
       {
    	   /*Loop is broken because flag is raised*/
    	   /*Clear the conversion complete flag*/
    	   SET_BIT(ADCSRC , ADCSRA_ADIF);
    2170:	a6 e2       	ldi	r26, 0x26	; 38
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e6 e2       	ldi	r30, 0x26	; 38
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	80 61       	ori	r24, 0x10	; 16
    217c:	8c 93       	st	X, r24

    	   /*Return reading*/
          #if ADC_RESOLUTION == ADC_8_BITS
              Copy_u16PtrReading = ADCH;
    217e:	e5 e2       	ldi	r30, 0x25	; 37
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	88 2f       	mov	r24, r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	99 87       	std	Y+9, r25	; 0x09
    218a:	88 87       	std	Y+8, r24	; 0x08
          #else
          #error "Wrong ADC_RESOLUTION Configuration option"
          #endif

          /*Make ADC state be idle because it finished*/
          ADC_u8BusyState = IDLE;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	80 93 60 00 	sts	0x0060, r24
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <ADC_u8StartConversionSynch+0xf8>
       }
    }
   else
	 {
		 u8 Local_u8ErrorStatus = BUSY_FUNCTION;
    2194:	83 e0       	ldi	r24, 0x03	; 3
    2196:	89 83       	std	Y+1, r24	; 0x01
	 }

   return Local_u8ErrorState;
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
 }
    219a:	29 96       	adiw	r28, 0x09	; 9
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel , u16* Copy_u16PtrReading , void (*Copy_VidPtrADCINTFunc)(void))
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	27 97       	sbiw	r28, 0x07	; 7
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	8b 83       	std	Y+3, r24	; 0x03
    21c2:	7d 83       	std	Y+5, r23	; 0x05
    21c4:	6c 83       	std	Y+4, r22	; 0x04
    21c6:	5f 83       	std	Y+7, r21	; 0x07
    21c8:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorStatus = OK;
    21ca:	1a 82       	std	Y+2, r1	; 0x02

	 if(ADC_u8BusyState == IDLE)
    21cc:	80 91 60 00 	lds	r24, 0x0060
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <ADC_u8StartConversionAsynch+0x2a>
    21d4:	3e c0       	rjmp	.+124    	; 0x2252 <ADC_u8StartConversionAsynch+0xa6>
	 {
	    if((Copy_VidPtrADCINTFunc == NULL) || (Copy_u16PtrReading ==NULL))
    21d6:	8e 81       	ldd	r24, Y+6	; 0x06
    21d8:	9f 81       	ldd	r25, Y+7	; 0x07
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	21 f0       	breq	.+8      	; 0x21e6 <ADC_u8StartConversionAsynch+0x3a>
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	9d 81       	ldd	r25, Y+5	; 0x05
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	19 f4       	brne	.+6      	; 0x21ec <ADC_u8StartConversionAsynch+0x40>
		{
			Local_u8ErrorStatus =NULL_POINTER;
    21e6:	82 e0       	ldi	r24, 0x02	; 2
    21e8:	8a 83       	std	Y+2, r24	; 0x02
    21ea:	35 c0       	rjmp	.+106    	; 0x2256 <ADC_u8StartConversionAsynch+0xaa>
		}
		else
		{
		  /*Make ADC busy in order not to work until being idle*/
		  ADC_u8BusyState = BUSY;
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	80 93 60 00 	sts	0x0060, r24

		  /*Initialize the reading variable globally */
          ADC_u16PtrReading = Copy_u16PtrReading;
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	9d 81       	ldd	r25, Y+5	; 0x05
    21f6:	90 93 94 00 	sts	0x0094, r25
    21fa:	80 93 93 00 	sts	0x0093, r24

          /*Initialize the callback notification function globally */
          ADC_VidPtrCallBackNotificationFunc = Copy_VidPtrADCINTFunc;
    21fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2200:	9f 81       	ldd	r25, Y+7	; 0x07
    2202:	90 93 92 00 	sts	0x0092, r25
    2206:	80 93 91 00 	sts	0x0091, r24

		 #if ANALOG_CHANNEL_MODE == SINGLE_ENDED
			  /*Clear the MUX bits in ADMUX register*/
	          ADMUX &= ADC_INPUT_CHANNEL_MASK;
    220a:	a7 e2       	ldi	r26, 0x27	; 39
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e7 e2       	ldi	r30, 0x27	; 39
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	80 7e       	andi	r24, 0xE0	; 224
    2216:	8c 93       	st	X, r24
	          /*Set the required channel into the MUX bits*/
	          ADMUX |= SINGLE_ENDED_INPUT;
    2218:	a7 e2       	ldi	r26, 0x27	; 39
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e7 e2       	ldi	r30, 0x27	; 39
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	80 6e       	ori	r24, 0xE0	; 224
    2224:	8c 93       	st	X, r24
        #else
        #error "Wrong ANALOG_CHANNEL_MODE Configuration option"
        #endif

        #if ADC_CONVERSION == SINGLE_CONVERSTION
            CLR_BIT(ADCSRC , ADCSRA_ADATE);
    2226:	a6 e2       	ldi	r26, 0x26	; 38
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e6 e2       	ldi	r30, 0x26	; 38
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	8f 7d       	andi	r24, 0xDF	; 223
    2232:	8c 93       	st	X, r24
            /*Start conversion*/
            SET_BIT(ADCSRC , ADCSRA_ADSC);
    2234:	a6 e2       	ldi	r26, 0x26	; 38
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e6 e2       	ldi	r30, 0x26	; 38
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	80 64       	ori	r24, 0x40	; 64
    2240:	8c 93       	st	X, r24
       #endif

            /*ADC interrupt enable*/
            SET_BIT(ADCSRC , ADCSRA_ADIE);
    2242:	a6 e2       	ldi	r26, 0x26	; 38
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e6 e2       	ldi	r30, 0x26	; 38
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	88 60       	ori	r24, 0x08	; 8
    224e:	8c 93       	st	X, r24
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <ADC_u8StartConversionAsynch+0xaa>
		}
	 }

	 else
	 {
		 u8 Local_u8ErrorStatus = BUSY_FUNCTION;
    2252:	83 e0       	ldi	r24, 0x03	; 3
    2254:	89 83       	std	Y+1, r24	; 0x01
	 }
		return Local_u8ErrorStatus;
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2258:	27 96       	adiw	r28, 0x07	; 7
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <map>:


s32 map(u32 Copy_s32InputMin , u32 Copy_s32InputMax , u32 Copy_s32OutputMin , u32 Copy_s32OutputMax , u32 Copy_s32InputVal)
{
    226a:	af 92       	push	r10
    226c:	bf 92       	push	r11
    226e:	cf 92       	push	r12
    2270:	df 92       	push	r13
    2272:	ef 92       	push	r14
    2274:	ff 92       	push	r15
    2276:	0f 93       	push	r16
    2278:	1f 93       	push	r17
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	64 97       	sbiw	r28, 0x14	; 20
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
    228e:	6d 83       	std	Y+5, r22	; 0x05
    2290:	7e 83       	std	Y+6, r23	; 0x06
    2292:	8f 83       	std	Y+7, r24	; 0x07
    2294:	98 87       	std	Y+8, r25	; 0x08
    2296:	29 87       	std	Y+9, r18	; 0x09
    2298:	3a 87       	std	Y+10, r19	; 0x0a
    229a:	4b 87       	std	Y+11, r20	; 0x0b
    229c:	5c 87       	std	Y+12, r21	; 0x0c
    229e:	ed 86       	std	Y+13, r14	; 0x0d
    22a0:	fe 86       	std	Y+14, r15	; 0x0e
    22a2:	0f 87       	std	Y+15, r16	; 0x0f
    22a4:	18 8b       	std	Y+16, r17	; 0x10
    22a6:	a9 8a       	std	Y+17, r10	; 0x11
    22a8:	ba 8a       	std	Y+18, r11	; 0x12
    22aa:	cb 8a       	std	Y+19, r12	; 0x13
    22ac:	dc 8a       	std	Y+20, r13	; 0x14
	s32 Local_s32OutputVal;

    Local_s32OutputVal =  (Copy_s32InputVal - Copy_s32InputMin);
    22ae:	29 a1       	ldd	r18, Y+33	; 0x21
    22b0:	3a a1       	ldd	r19, Y+34	; 0x22
    22b2:	4b a1       	ldd	r20, Y+35	; 0x23
    22b4:	5c a1       	ldd	r21, Y+36	; 0x24
    22b6:	8d 81       	ldd	r24, Y+5	; 0x05
    22b8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ba:	af 81       	ldd	r26, Y+7	; 0x07
    22bc:	b8 85       	ldd	r27, Y+8	; 0x08
    22be:	79 01       	movw	r14, r18
    22c0:	8a 01       	movw	r16, r20
    22c2:	e8 1a       	sub	r14, r24
    22c4:	f9 0a       	sbc	r15, r25
    22c6:	0a 0b       	sbc	r16, r26
    22c8:	1b 0b       	sbc	r17, r27
    22ca:	d8 01       	movw	r26, r16
    22cc:	c7 01       	movw	r24, r14
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	ab 83       	std	Y+3, r26	; 0x03
    22d4:	bc 83       	std	Y+4, r27	; 0x04
    Local_s32OutputVal *= (Copy_s32OutputMax - Copy_s32OutputMin);
    22d6:	29 89       	ldd	r18, Y+17	; 0x11
    22d8:	3a 89       	ldd	r19, Y+18	; 0x12
    22da:	4b 89       	ldd	r20, Y+19	; 0x13
    22dc:	5c 89       	ldd	r21, Y+20	; 0x14
    22de:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e2:	af 85       	ldd	r26, Y+15	; 0x0f
    22e4:	b8 89       	ldd	r27, Y+16	; 0x10
    22e6:	79 01       	movw	r14, r18
    22e8:	8a 01       	movw	r16, r20
    22ea:	e8 1a       	sub	r14, r24
    22ec:	f9 0a       	sbc	r15, r25
    22ee:	0a 0b       	sbc	r16, r26
    22f0:	1b 0b       	sbc	r17, r27
    22f2:	d8 01       	movw	r26, r16
    22f4:	c7 01       	movw	r24, r14
    22f6:	29 81       	ldd	r18, Y+1	; 0x01
    22f8:	3a 81       	ldd	r19, Y+2	; 0x02
    22fa:	4b 81       	ldd	r20, Y+3	; 0x03
    22fc:	5c 81       	ldd	r21, Y+4	; 0x04
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 3e 12 	call	0x247c	; 0x247c <__mulsi3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	9a 83       	std	Y+2, r25	; 0x02
    230e:	ab 83       	std	Y+3, r26	; 0x03
    2310:	bc 83       	std	Y+4, r27	; 0x04
    Local_s32OutputVal /= (Copy_s32InputMax - Copy_s32InputMin);
    2312:	e9 80       	ldd	r14, Y+1	; 0x01
    2314:	fa 80       	ldd	r15, Y+2	; 0x02
    2316:	0b 81       	ldd	r16, Y+3	; 0x03
    2318:	1c 81       	ldd	r17, Y+4	; 0x04
    231a:	29 85       	ldd	r18, Y+9	; 0x09
    231c:	3a 85       	ldd	r19, Y+10	; 0x0a
    231e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2320:	5c 85       	ldd	r21, Y+12	; 0x0c
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	af 81       	ldd	r26, Y+7	; 0x07
    2328:	b8 85       	ldd	r27, Y+8	; 0x08
    232a:	28 1b       	sub	r18, r24
    232c:	39 0b       	sbc	r19, r25
    232e:	4a 0b       	sbc	r20, r26
    2330:	5b 0b       	sbc	r21, r27
    2332:	c8 01       	movw	r24, r16
    2334:	b7 01       	movw	r22, r14
    2336:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__udivmodsi4>
    233a:	da 01       	movw	r26, r20
    233c:	c9 01       	movw	r24, r18
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	9a 83       	std	Y+2, r25	; 0x02
    2342:	ab 83       	std	Y+3, r26	; 0x03
    2344:	bc 83       	std	Y+4, r27	; 0x04
    Local_s32OutputVal += Copy_s32OutputMin;
    2346:	29 81       	ldd	r18, Y+1	; 0x01
    2348:	3a 81       	ldd	r19, Y+2	; 0x02
    234a:	4b 81       	ldd	r20, Y+3	; 0x03
    234c:	5c 81       	ldd	r21, Y+4	; 0x04
    234e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2350:	9e 85       	ldd	r25, Y+14	; 0x0e
    2352:	af 85       	ldd	r26, Y+15	; 0x0f
    2354:	b8 89       	ldd	r27, Y+16	; 0x10
    2356:	82 0f       	add	r24, r18
    2358:	93 1f       	adc	r25, r19
    235a:	a4 1f       	adc	r26, r20
    235c:	b5 1f       	adc	r27, r21
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	ab 83       	std	Y+3, r26	; 0x03
    2364:	bc 83       	std	Y+4, r27	; 0x04

    return Local_s32OutputVal;
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	ab 81       	ldd	r26, Y+3	; 0x03
    236c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	64 96       	adiw	r28, 0x14	; 20
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	ff 90       	pop	r15
    2388:	ef 90       	pop	r14
    238a:	df 90       	pop	r13
    238c:	cf 90       	pop	r12
    238e:	bf 90       	pop	r11
    2390:	af 90       	pop	r10
    2392:	08 95       	ret

00002394 <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
 {
    2394:	1f 92       	push	r1
    2396:	0f 92       	push	r0
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	0f 92       	push	r0
    239c:	11 24       	eor	r1, r1
    239e:	2f 93       	push	r18
    23a0:	3f 93       	push	r19
    23a2:	4f 93       	push	r20
    23a4:	5f 93       	push	r21
    23a6:	6f 93       	push	r22
    23a8:	7f 93       	push	r23
    23aa:	8f 93       	push	r24
    23ac:	9f 93       	push	r25
    23ae:	af 93       	push	r26
    23b0:	bf 93       	push	r27
    23b2:	ef 93       	push	r30
    23b4:	ff 93       	push	r31
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
	/*Read ADC result*/
    #if ADC_RESOLUTION == ADC_8_BITS
        *ADC_u16PtrReading = ADCH;
    23be:	a0 91 93 00 	lds	r26, 0x0093
    23c2:	b0 91 94 00 	lds	r27, 0x0094
    23c6:	e5 e2       	ldi	r30, 0x25	; 37
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	88 2f       	mov	r24, r24
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	8d 93       	st	X+, r24
    23d2:	9c 93       	st	X, r25
    #else
    #error "Wrong ADC_RESOLUTION Configuration option"
    #endif

     /*Make ADC state be idle because it finished*/
     ADC_u8BusyState = IDLE;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	80 93 60 00 	sts	0x0060, r24

    /*Invoke the callback notification function*/
    ADC_VidPtrCallBackNotificationFunc();
    23da:	e0 91 91 00 	lds	r30, 0x0091
    23de:	f0 91 92 00 	lds	r31, 0x0092
    23e2:	09 95       	icall

    /*Disable ADC conversion complete interrupt*/
    CLR_BIT(ADCSRC , ADCSRA_ADIE);
    23e4:	a6 e2       	ldi	r26, 0x26	; 38
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e6 e2       	ldi	r30, 0x26	; 38
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	87 7f       	andi	r24, 0xF7	; 247
    23f0:	8c 93       	st	X, r24
 }
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	ff 91       	pop	r31
    23f8:	ef 91       	pop	r30
    23fa:	bf 91       	pop	r27
    23fc:	af 91       	pop	r26
    23fe:	9f 91       	pop	r25
    2400:	8f 91       	pop	r24
    2402:	7f 91       	pop	r23
    2404:	6f 91       	pop	r22
    2406:	5f 91       	pop	r21
    2408:	4f 91       	pop	r20
    240a:	3f 91       	pop	r19
    240c:	2f 91       	pop	r18
    240e:	0f 90       	pop	r0
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	0f 90       	pop	r0
    2414:	1f 90       	pop	r1
    2416:	18 95       	reti

00002418 <main>:
#include "D:\AVR_WS\COTS\Lib\BIT_MATH.h"
#include "D:\AVR_WS\COTS\MCAL\DIO_Driver\DIO_interface.h"
#include "D:\AVR_WS\COTS\MCAL\UART_Driver\UART_interface.h"

void main(void)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	00 d0       	rcall	.+0      	; 0x241e <main+0x6>
    241e:	0f 92       	push	r0
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Data=0;
    2424:	19 82       	std	Y+1, r1	; 0x01

	DIO_VidSetPinDirection(PORT_C,PIN_0,OUTPUT);
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_VidSetPinDirection>
	UART_VidInit(BAUD_RATE_9600, U1X);
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	0e 94 49 00 	call	0x92	; 0x92 <UART_VidInit>

	while(1)
	{
		Local_u8Data = UART_VidRecevie();
    2438:	0e 94 fe 01 	call	0x3fc	; 0x3fc <UART_VidRecevie>
    243c:	89 83       	std	Y+1, r24	; 0x01

		switch(Local_u8Data)
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	3b 83       	std	Y+3, r19	; 0x03
    2446:	2a 83       	std	Y+2, r18	; 0x02
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	9b 81       	ldd	r25, Y+3	; 0x03
    244c:	81 33       	cpi	r24, 0x31	; 49
    244e:	91 05       	cpc	r25, r1
    2450:	31 f0       	breq	.+12     	; 0x245e <main+0x46>
    2452:	2a 81       	ldd	r18, Y+2	; 0x02
    2454:	3b 81       	ldd	r19, Y+3	; 0x03
    2456:	25 33       	cpi	r18, 0x35	; 53
    2458:	31 05       	cpc	r19, r1
    245a:	39 f0       	breq	.+14     	; 0x246a <main+0x52>
    245c:	0b c0       	rjmp	.+22     	; 0x2474 <main+0x5c>
		{
		case ('1'):DIO_VidSetPinValue(PORT_C,PIN_0,HIGH);break;
    245e:	83 e0       	ldi	r24, 0x03	; 3
    2460:	60 e0       	ldi	r22, 0x00	; 0
    2462:	41 e0       	ldi	r20, 0x01	; 1
    2464:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <DIO_VidSetPinValue>
    2468:	05 c0       	rjmp	.+10     	; 0x2474 <main+0x5c>
		case ('5'):DIO_VidSetPinValue(PORT_C,PIN_0,LOW);break;
    246a:	83 e0       	ldi	r24, 0x03	; 3
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	40 e0       	ldi	r20, 0x00	; 0
    2470:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <DIO_VidSetPinValue>
		}

		UART_VidSend('A');
    2474:	81 e4       	ldi	r24, 0x41	; 65
    2476:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <UART_VidSend>
    247a:	de cf       	rjmp	.-68     	; 0x2438 <main+0x20>

0000247c <__mulsi3>:
    247c:	62 9f       	mul	r22, r18
    247e:	d0 01       	movw	r26, r0
    2480:	73 9f       	mul	r23, r19
    2482:	f0 01       	movw	r30, r0
    2484:	82 9f       	mul	r24, r18
    2486:	e0 0d       	add	r30, r0
    2488:	f1 1d       	adc	r31, r1
    248a:	64 9f       	mul	r22, r20
    248c:	e0 0d       	add	r30, r0
    248e:	f1 1d       	adc	r31, r1
    2490:	92 9f       	mul	r25, r18
    2492:	f0 0d       	add	r31, r0
    2494:	83 9f       	mul	r24, r19
    2496:	f0 0d       	add	r31, r0
    2498:	74 9f       	mul	r23, r20
    249a:	f0 0d       	add	r31, r0
    249c:	65 9f       	mul	r22, r21
    249e:	f0 0d       	add	r31, r0
    24a0:	99 27       	eor	r25, r25
    24a2:	72 9f       	mul	r23, r18
    24a4:	b0 0d       	add	r27, r0
    24a6:	e1 1d       	adc	r30, r1
    24a8:	f9 1f       	adc	r31, r25
    24aa:	63 9f       	mul	r22, r19
    24ac:	b0 0d       	add	r27, r0
    24ae:	e1 1d       	adc	r30, r1
    24b0:	f9 1f       	adc	r31, r25
    24b2:	bd 01       	movw	r22, r26
    24b4:	cf 01       	movw	r24, r30
    24b6:	11 24       	eor	r1, r1
    24b8:	08 95       	ret

000024ba <__udivmodsi4>:
    24ba:	a1 e2       	ldi	r26, 0x21	; 33
    24bc:	1a 2e       	mov	r1, r26
    24be:	aa 1b       	sub	r26, r26
    24c0:	bb 1b       	sub	r27, r27
    24c2:	fd 01       	movw	r30, r26
    24c4:	0d c0       	rjmp	.+26     	; 0x24e0 <__udivmodsi4_ep>

000024c6 <__udivmodsi4_loop>:
    24c6:	aa 1f       	adc	r26, r26
    24c8:	bb 1f       	adc	r27, r27
    24ca:	ee 1f       	adc	r30, r30
    24cc:	ff 1f       	adc	r31, r31
    24ce:	a2 17       	cp	r26, r18
    24d0:	b3 07       	cpc	r27, r19
    24d2:	e4 07       	cpc	r30, r20
    24d4:	f5 07       	cpc	r31, r21
    24d6:	20 f0       	brcs	.+8      	; 0x24e0 <__udivmodsi4_ep>
    24d8:	a2 1b       	sub	r26, r18
    24da:	b3 0b       	sbc	r27, r19
    24dc:	e4 0b       	sbc	r30, r20
    24de:	f5 0b       	sbc	r31, r21

000024e0 <__udivmodsi4_ep>:
    24e0:	66 1f       	adc	r22, r22
    24e2:	77 1f       	adc	r23, r23
    24e4:	88 1f       	adc	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	1a 94       	dec	r1
    24ea:	69 f7       	brne	.-38     	; 0x24c6 <__udivmodsi4_loop>
    24ec:	60 95       	com	r22
    24ee:	70 95       	com	r23
    24f0:	80 95       	com	r24
    24f2:	90 95       	com	r25
    24f4:	9b 01       	movw	r18, r22
    24f6:	ac 01       	movw	r20, r24
    24f8:	bd 01       	movw	r22, r26
    24fa:	cf 01       	movw	r24, r30
    24fc:	08 95       	ret

000024fe <_exit>:
    24fe:	f8 94       	cli

00002500 <__stop_program>:
    2500:	ff cf       	rjmp	.-2      	; 0x2500 <__stop_program>
